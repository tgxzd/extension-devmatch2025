{
    "address": "0x39266942a0F29C6a3495e43fCaE510C0a454B1d9",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_contractOwner",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "target",
            "type": "address"
          }
        ],
        "name": "AddressEmptyCode",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "AddressInsufficientBalance",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "FailedInnerCall",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ReentrancyGuardReentrantCall",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "name": "SafeERC20FailedOperation",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "string",
            "name": "username",
            "type": "string"
          },
          {
            "indexed": true,
            "internalType": "string",
            "name": "platform",
            "type": "string"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "ContentDeactivated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "string",
            "name": "username",
            "type": "string"
          },
          {
            "indexed": true,
            "internalType": "string",
            "name": "platform",
            "type": "string"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "ContentReactivated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "string",
            "name": "username",
            "type": "string"
          },
          {
            "indexed": true,
            "internalType": "string",
            "name": "platform",
            "type": "string"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "ContentRegistered",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "donor",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "contentOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "string",
            "name": "contentUsername",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "contentPlatform",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "donationId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "name": "DonationMade",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "string",
            "name": "platform",
            "type": "string"
          }
        ],
        "name": "PlatformAdded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "oldFee",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newFee",
            "type": "uint256"
          }
        ],
        "name": "PlatformFeeUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "string",
            "name": "platform",
            "type": "string"
          }
        ],
        "name": "PlatformRemoved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "symbol",
            "type": "string"
          }
        ],
        "name": "TokenAdded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "name": "TokenRemoved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "string",
            "name": "oldUsername",
            "type": "string"
          },
          {
            "indexed": true,
            "internalType": "string",
            "name": "newUsername",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "platform",
            "type": "string"
          }
        ],
        "name": "UsernameChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "creator",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "name": "WithdrawalMade",
        "type": "event"
      },
      {
        "stateMutability": "payable",
        "type": "fallback"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_platform",
            "type": "string"
          }
        ],
        "name": "addSupportedPlatform",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "_symbol",
            "type": "string"
          }
        ],
        "name": "addSupportedToken",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_oldUsername",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_newUsername",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_platform",
            "type": "string"
          }
        ],
        "name": "changeUsername",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "contentDonations",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_username",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_platform",
            "type": "string"
          }
        ],
        "name": "contentExistsCheck",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "name": "contents",
        "outputs": [
          {
            "internalType": "string",
            "name": "username",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "platform",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "totalDonationsReceived",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "donationCount",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "isActive",
            "type": "bool"
          },
          {
            "internalType": "uint256",
            "name": "createdAt",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "contractOwner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "creatorContents",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "creatorEarnings",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_username",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_platform",
            "type": "string"
          }
        ],
        "name": "deactivateContent",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_username",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_platform",
            "type": "string"
          }
        ],
        "name": "donateToContent",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_username",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_platform",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "donateTokenToContent",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "donations",
        "outputs": [
          {
            "internalType": "address",
            "name": "donor",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "contentOwner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "contentUsername",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "contentPlatform",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "donorTotalDonations",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_username",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_platform",
            "type": "string"
          }
        ],
        "name": "getContent",
        "outputs": [
          {
            "internalType": "string",
            "name": "username",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "platform",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "totalDonationsReceived",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "donationCount",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "isActive",
            "type": "bool"
          },
          {
            "internalType": "uint256",
            "name": "createdAt",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_username",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_platform",
            "type": "string"
          }
        ],
        "name": "getContentDonations",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_creator",
            "type": "address"
          }
        ],
        "name": "getCreatorAllEarnings",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "tokens",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          },
          {
            "internalType": "string[]",
            "name": "symbols",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_creator",
            "type": "address"
          }
        ],
        "name": "getCreatorContents",
        "outputs": [
          {
            "internalType": "string[]",
            "name": "",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_creator",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          }
        ],
        "name": "getCreatorEarnings",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_donationId",
            "type": "uint256"
          }
        ],
        "name": "getDonation",
        "outputs": [
          {
            "internalType": "address",
            "name": "donor",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "contentOwner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "contentUsername",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "contentPlatform",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_donor",
            "type": "address"
          }
        ],
        "name": "getDonorAllDonations",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "tokens",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          },
          {
            "internalType": "string[]",
            "name": "symbols",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_donor",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          }
        ],
        "name": "getDonorTotalDonations",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getPlatformStats",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalContentsCount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "totalDonationsCount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "currentPlatformFee",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_username",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_platform",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "_limit",
            "type": "uint256"
          }
        ],
        "name": "getRecentDonations",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getSupportedPlatforms",
        "outputs": [
          {
            "internalType": "string[]",
            "name": "",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getSupportedTokens",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "tokens",
            "type": "address[]"
          },
          {
            "internalType": "string[]",
            "name": "symbols",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "platformFee",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_username",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_platform",
            "type": "string"
          }
        ],
        "name": "reactivateContent",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_username",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_platform",
            "type": "string"
          }
        ],
        "name": "registerContent",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_platform",
            "type": "string"
          }
        ],
        "name": "removeSupportedPlatform",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          }
        ],
        "name": "removeSupportedToken",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "supportedPlatformList",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "name": "supportedPlatforms",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "supportedTokenList",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "supportedTokens",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "tokenSymbols",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalContents",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalDonations",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_username",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_platform",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_newOwner",
            "type": "address"
          }
        ],
        "name": "transferContentOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_newFee",
            "type": "uint256"
          }
        ],
        "name": "updatePlatformFee",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdrawAllEarnings",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdrawAllPlatformFees",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdrawEthEarnings",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdrawPlatformFeesEth",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          }
        ],
        "name": "withdrawPlatformFeesToken",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          }
        ],
        "name": "withdrawTokenEarnings",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "stateMutability": "payable",
        "type": "receive"
      }
    ],
    "transactionHash": "0xa58e616b64c65e37f0187fc9f0b0f9381a7611ca5b2d83df3b9938d4133d5eed",
    "receipt": {
      "to": null,
      "from": "0xE594d66726C49625A381fe7b0FddF66725B5eF26",
      "contractAddress": "0x39266942a0F29C6a3495e43fCaE510C0a454B1d9",
      "transactionIndex": 10,
      "gasUsed": "5109968",
      "logsBloom": "0x
      "blockHash": "0x17887d4d1a3625e6e631a92e8dd43943a4b133852a1a551dd56f15036eb06d46",
      "transactionHash": "0xa58e616b64c65e37f0187fc9f0b0f9381a7611ca5b2d83df3b9938d4133d5eed",
      "logs": [],
      "blockNumber": 29499130,
      "cumulativeGasUsed": "7549341",
      "status": 1,
      "byzantium": true
    },
    "args": [
      "0xE594d66726C49625A381fe7b0FddF66725B5eF26"
    ],
    "numDeployments": 2,
    "solcInputHash": "b5c63f930b40d65dfc29205f8be1d86e",
    "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ContentDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ContentReactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ContentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contentUsername\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentPlatform\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"donationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DonationMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"}],\"name\":\"PlatformAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"}],\"name\":\"PlatformRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"oldUsername\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newUsername\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"}],\"name\":\"UsernameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"WithdrawalMade\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_platform\",\"type\":\"string\"}],\"name\":\"addSupportedPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"addSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_oldUsername\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newUsername\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_platform\",\"type\":\"string\"}],\"name\":\"changeUsername\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_platform\",\"type\":\"string\"}],\"name\":\"contentExistsCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"contents\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDonationsReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorContents\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creatorEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_platform\",\"type\":\"string\"}],\"name\":\"deactivateContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_platform\",\"type\":\"string\"}],\"name\":\"donateToContent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_platform\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donateTokenToContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contentOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"contentUsername\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentPlatform\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donorTotalDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_platform\",\"type\":\"string\"}],\"name\":\"getContent\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDonationsReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_platform\",\"type\":\"string\"}],\"name\":\"getContentDonations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getCreatorAllEarnings\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getCreatorContents\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCreatorEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_donationId\",\"type\":\"uint256\"}],\"name\":\"getDonation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contentOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"contentUsername\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentPlatform\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donor\",\"type\":\"address\"}],\"name\":\"getDonorAllDonations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getDonorTotalDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalContentsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDonationsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPlatformFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_platform\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getRecentDonations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedPlatforms\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_platform\",\"type\":\"string\"}],\"name\":\"reactivateContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_platform\",\"type\":\"string\"}],\"name\":\"registerContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_platform\",\"type\":\"string\"}],\"name\":\"removeSupportedPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedPlatformList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"supportedPlatforms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedTokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSymbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_platform\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferContentOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllPlatformFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEthEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPlatformFeesEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawPlatformFeesToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokenEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Pisang Biru \",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"addSupportedPlatform(string)\":{\"params\":{\"_platform\":\"The platform name to add\"}},\"addSupportedToken(address,string)\":{\"params\":{\"_symbol\":\"The token symbol for display purposes\",\"_token\":\"The token address to add\"}},\"changeUsername(string,string,string)\":{\"params\":{\"_newUsername\":\"The new username\",\"_oldUsername\":\"The current username\",\"_platform\":\"The platform of the content\"}},\"contentExistsCheck(string,string)\":{\"params\":{\"_platform\":\"The platform to check\",\"_username\":\"The username to check\"},\"returns\":{\"_0\":\"bool True if content exists, false otherwise\"}},\"deactivateContent(string,string)\":{\"params\":{\"_platform\":\"The platform of the content\",\"_username\":\"The username to deactivate\"}},\"donateToContent(string,string)\":{\"params\":{\"_platform\":\"The platform of the content\",\"_username\":\"The username to donate to\"}},\"donateTokenToContent(string,string,address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to donate\",\"_platform\":\"The platform of the content\",\"_token\":\"The token address to donate\",\"_username\":\"The username to donate to\"}},\"getContent(string,string)\":{\"params\":{\"_platform\":\"The platform\",\"_username\":\"The username\"}},\"getContentDonations(string,string)\":{\"params\":{\"_platform\":\"The platform\",\"_username\":\"The username\"}},\"getCreatorAllEarnings(address)\":{\"params\":{\"_creator\":\"The creator's address\"}},\"getCreatorContents(address)\":{\"params\":{\"_creator\":\"The creator's address\"}},\"getCreatorEarnings(address,address)\":{\"params\":{\"_creator\":\"The creator's address\",\"_token\":\"The token address (address(0) for ETH)\"}},\"getDonation(uint256)\":{\"params\":{\"_donationId\":\"The donation ID\"}},\"getDonorAllDonations(address)\":{\"params\":{\"_donor\":\"The donor's address\"}},\"getDonorTotalDonations(address,address)\":{\"params\":{\"_donor\":\"The donor's address\",\"_token\":\"The token address (address(0) for ETH)\"}},\"getRecentDonations(string,string,uint256)\":{\"params\":{\"_limit\":\"The number of recent donations to return\",\"_platform\":\"The platform\",\"_username\":\"The username\"}},\"reactivateContent(string,string)\":{\"params\":{\"_platform\":\"The platform of the content\",\"_username\":\"The username to reactivate\"}},\"registerContent(string,string)\":{\"params\":{\"_platform\":\"The platform (twitch, youtube, facebook, tiktok, etc.)\",\"_username\":\"The username on the platform\"}},\"removeSupportedPlatform(string)\":{\"params\":{\"_platform\":\"The platform name to remove\"}},\"removeSupportedToken(address)\":{\"params\":{\"_token\":\"The token address to remove\"}},\"transferContentOwnership(string,string,address)\":{\"params\":{\"_newOwner\":\"The new owner address\",\"_platform\":\"The platform\",\"_username\":\"The username\"}},\"updatePlatformFee(uint256)\":{\"params\":{\"_newFee\":\"New fee in basis points (e.g., 250 = 2.5%)\"}},\"withdrawPlatformFeesToken(address)\":{\"params\":{\"_token\":\"The token address to withdraw fees for\"}},\"withdrawTokenEarnings(address)\":{\"params\":{\"_token\":\"The token address to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSupportedPlatform(string)\":{\"notice\":\"Add a supported platform (only contract owner)\"},\"addSupportedToken(address,string)\":{\"notice\":\"Add a supported token (only contract owner)\"},\"changeUsername(string,string,string)\":{\"notice\":\"Change username for an existing content account\"},\"contentExistsCheck(string,string)\":{\"notice\":\"Check if content exists\"},\"deactivateContent(string,string)\":{\"notice\":\"Deactivate content (only by content owner)\"},\"donateToContent(string,string)\":{\"notice\":\"Donate to a specific content\"},\"donateTokenToContent(string,string,address,uint256)\":{\"notice\":\"Donate tokens to a specific content\"},\"getContent(string,string)\":{\"notice\":\"Get content information\"},\"getContentDonations(string,string)\":{\"notice\":\"Get donation IDs for a specific content\"},\"getCreatorAllEarnings(address)\":{\"notice\":\"Get creator earnings for all tokens\"},\"getCreatorContents(address)\":{\"notice\":\"Get all content keys (username-at-platform) by a creator\"},\"getCreatorEarnings(address,address)\":{\"notice\":\"Get creator earnings for a specific token\"},\"getDonation(uint256)\":{\"notice\":\"Get donation details by ID\"},\"getDonorAllDonations(address)\":{\"notice\":\"Get donor total donations for all tokens\"},\"getDonorTotalDonations(address,address)\":{\"notice\":\"Get donor total donations for a specific token\"},\"getPlatformStats()\":{\"notice\":\"Get platform statistics\"},\"getRecentDonations(string,string,uint256)\":{\"notice\":\"Get recent donations for a specific content\"},\"getSupportedPlatforms()\":{\"notice\":\"Get all supported platforms\"},\"getSupportedTokens()\":{\"notice\":\"Get all supported tokens\"},\"reactivateContent(string,string)\":{\"notice\":\"Reactivate content (only by content owner)\"},\"registerContent(string,string)\":{\"notice\":\"Register a new streaming content with username and platform\"},\"removeSupportedPlatform(string)\":{\"notice\":\"Remove a supported platform (only contract owner)\"},\"removeSupportedToken(address)\":{\"notice\":\"Remove a supported token (only contract owner)\"},\"transferContentOwnership(string,string,address)\":{\"notice\":\"Emergency function to transfer content ownership\"},\"updatePlatformFee(uint256)\":{\"notice\":\"Update platform fee (only contract owner)\"},\"withdrawAllEarnings()\":{\"notice\":\"Withdraw all earnings for a creator (ETH + all supported tokens)\"},\"withdrawAllPlatformFees()\":{\"notice\":\"Withdraw all platform fees (ETH + all tokens) (only contract owner)\"},\"withdrawEthEarnings()\":{\"notice\":\"Allow creators to withdraw their ETH earnings\"},\"withdrawPlatformFeesEth()\":{\"notice\":\"Withdraw platform fees in ETH (only contract owner)\"},\"withdrawPlatformFeesToken(address)\":{\"notice\":\"Withdraw platform fees in tokens (only contract owner)\"},\"withdrawTokenEarnings(address)\":{\"notice\":\"Allow creators to withdraw their token earnings\"}},\"notice\":\"A smart contract for streaming content donations Allows content creators to register their streaming URLs and receive donations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PisangContract.sol\":\"PisangContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/PisangContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * A smart contract for streaming content donations\\n * Allows content creators to register their streaming URLs and receive donations\\n * @author Pisang Biru \\n */\\ncontract PisangContract is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    \\n    // State Variables\\n    address public immutable contractOwner;\\n    uint256 public totalContents = 0;\\n    uint256 public totalDonations = 0;\\n    uint256 public platformFee = 250; // 2.5% (in basis points)\\n    \\n    // Token support\\n    mapping(address => bool) public supportedTokens;\\n    mapping(address => string) public tokenSymbols;\\n    address[] public supportedTokenList;\\n    \\n    // Platform support\\n    mapping(string => bool) public supportedPlatforms;\\n    string[] public supportedPlatformList;\\n    \\n    // Structs\\n    struct Content {\\n        string username;\\n        string platform; // twitch, youtube, facebook, tiktok, etc.\\n        address owner;\\n        uint256 totalDonationsReceived;\\n        uint256 donationCount;\\n        bool isActive;\\n        uint256 createdAt;\\n    }\\n    \\n    struct Donation {\\n        address donor;\\n        address contentOwner;\\n        uint256 amount;\\n        uint256 timestamp;\\n        string contentUsername;\\n        string contentPlatform;\\n        address token; // address(0) for ETH, token address for ERC20\\n    }\\n    \\n    // Mappings\\n    mapping(string => Content) public contents; // \\\"username-at-platform\\\" => Content\\n    mapping(address => string[]) public creatorContents; // creator => \\\"username-at-platform\\\"[]\\n    mapping(address => mapping(address => uint256)) public creatorEarnings; // creator => token => total earnings\\n    mapping(address => mapping(address => uint256)) public donorTotalDonations; // donor => token => total donated\\n    mapping(uint256 => Donation) public donations; // donation ID => Donation\\n    mapping(string => uint256[]) public contentDonations; // \\\"username-at-platform\\\" => donation IDs[]\\n    \\n    // Events\\n    event ContentRegistered(\\n        string indexed username,\\n        string indexed platform,\\n        address indexed owner, \\n        uint256 timestamp\\n    );\\n    \\n    event DonationMade(\\n        address indexed donor,\\n        address indexed contentOwner,\\n        string indexed contentUsername,\\n        string contentPlatform,\\n        uint256 amount,\\n        uint256 donationId,\\n        uint256 timestamp,\\n        address token\\n    );\\n    \\n    event ContentDeactivated(string indexed username, string indexed platform, address indexed owner);\\n    event ContentReactivated(string indexed username, string indexed platform, address indexed owner);\\n    event WithdrawalMade(address indexed creator, uint256 amount, address token);\\n    event PlatformFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event TokenAdded(address indexed token, string symbol);\\n    event TokenRemoved(address indexed token);\\n    event PlatformAdded(string indexed platform);\\n    event PlatformRemoved(string indexed platform);\\n    event UsernameChanged(address indexed owner, string indexed oldUsername, string indexed newUsername, string platform);\\n    \\n    // Modifiers\\n    modifier onlyContractOwner() {\\n        require(msg.sender == contractOwner, \\\"Not the contract owner\\\");\\n        _;\\n    }\\n    \\n    modifier onlyContentOwner(string memory _usernameAtPlatform) {\\n        require(contents[_usernameAtPlatform].owner == msg.sender, \\\"Not the content owner\\\");\\n        _;\\n    }\\n    \\n    modifier contentExists(string memory _usernameAtPlatform) {\\n        require(bytes(contents[_usernameAtPlatform].username).length > 0, \\\"Content does not exist\\\");\\n        _;\\n    }\\n    \\n    modifier contentActive(string memory _usernameAtPlatform) {\\n        require(contents[_usernameAtPlatform].isActive, \\\"Content is not active\\\");\\n        _;\\n    }\\n    \\n    // Constructor\\n    constructor(address _contractOwner) {\\n        contractOwner = _contractOwner;\\n        \\n        // Initialize supported platforms\\n        supportedPlatforms[\\\"twitch\\\"] = true;\\n        supportedPlatforms[\\\"youtube\\\"] = true;\\n        supportedPlatforms[\\\"facebook\\\"] = true;\\n        supportedPlatforms[\\\"tiktok\\\"] = true;\\n        supportedPlatforms[\\\"instagram\\\"] = true;\\n        supportedPlatforms[\\\"twitter\\\"] = true;\\n        \\n        supportedPlatformList.push(\\\"twitch\\\");\\n        supportedPlatformList.push(\\\"youtube\\\");\\n        supportedPlatformList.push(\\\"facebook\\\");\\n        supportedPlatformList.push(\\\"tiktok\\\");\\n        supportedPlatformList.push(\\\"instagram\\\");\\n        supportedPlatformList.push(\\\"twitter\\\");\\n    }\\n    \\n    /**\\n     * Helper function to create username-at-platform key\\n     * @param _username The username\\n     * @param _platform The platform\\n     */\\n    function _createKey(string memory _username, string memory _platform) \\n        internal \\n        pure \\n        returns (string memory) \\n    {\\n        return string(abi.encodePacked(_username, \\\"@\\\", _platform));\\n    }\\n    \\n    /**\\n     * Register a new streaming content with username and platform\\n     * @param _username The username on the platform\\n     * @param _platform The platform (twitch, youtube, facebook, tiktok, etc.)\\n     */\\n    function registerContent(string memory _username, string memory _platform) public {\\n        require(bytes(_username).length > 0, \\\"Username cannot be empty\\\");\\n        require(bytes(_platform).length > 0, \\\"Platform cannot be empty\\\");\\n        require(supportedPlatforms[_platform], \\\"Platform not supported\\\");\\n        \\n        string memory key = _createKey(_username, _platform);\\n        require(bytes(contents[key].username).length == 0, \\\"Content already registered\\\");\\n        \\n        contents[key] = Content({\\n            username: _username,\\n            platform: _platform,\\n            owner: msg.sender,\\n            totalDonationsReceived: 0,\\n            donationCount: 0,\\n            isActive: true,\\n            createdAt: block.timestamp\\n        });\\n        \\n        creatorContents[msg.sender].push(key);\\n        totalContents++;\\n        \\n        emit ContentRegistered(_username, _platform, msg.sender, block.timestamp);\\n    }\\n    \\n    /**\\n     * Donate to a specific content\\n     * @param _username The username to donate to\\n     * @param _platform The platform of the content\\n     */\\n    function donateToContent(string memory _username, string memory _platform) \\n        public \\n        payable \\n    {\\n        string memory key = _createKey(_username, _platform);\\n        require(bytes(contents[key].username).length > 0, \\\"Content does not exist\\\");\\n        require(contents[key].isActive, \\\"Content is not active\\\");\\n        require(msg.value > 0, \\\"Donation amount must be greater than 0\\\");\\n        \\n        Content storage content = contents[key];\\n        \\n        // Calculate platform fee\\n        uint256 fee = (msg.value * platformFee) / 10000;\\n        uint256 creatorAmount = msg.value - fee;\\n        \\n        // Update content stats\\n        content.totalDonationsReceived += creatorAmount;\\n        content.donationCount++;\\n        \\n        // Update creator earnings (ETH)\\n        creatorEarnings[content.owner][address(0)] += creatorAmount;\\n        \\n        // Update donor stats (ETH)\\n        donorTotalDonations[msg.sender][address(0)] += msg.value;\\n        \\n        // Create donation record\\n        donations[totalDonations] = Donation({\\n            donor: msg.sender,\\n            contentOwner: content.owner,\\n            amount: msg.value,\\n            timestamp: block.timestamp,\\n            contentUsername: _username,\\n            contentPlatform: _platform,\\n            token: address(0) // ETH\\n        });\\n        \\n        // Add donation ID to content donations\\n        contentDonations[key].push(totalDonations);\\n        \\n        totalDonations++;\\n        \\n        emit DonationMade(\\n            msg.sender, \\n            content.owner, \\n            _username,\\n            _platform,\\n            msg.value, \\n            totalDonations - 1, \\n            block.timestamp,\\n            address(0) // ETH\\n        );\\n    }\\n    \\n    /**\\n     * Donate tokens to a specific content\\n     * @param _username The username to donate to\\n     * @param _platform The platform of the content\\n     * @param _token The token address to donate\\n     * @param _amount The amount of tokens to donate\\n     */\\n    function donateTokenToContent(\\n        string memory _username,\\n        string memory _platform,\\n        address _token, \\n        uint256 _amount\\n    ) \\n        public \\n        nonReentrant\\n    {\\n        string memory key = _createKey(_username, _platform);\\n        require(bytes(contents[key].username).length > 0, \\\"Content does not exist\\\");\\n        require(contents[key].isActive, \\\"Content is not active\\\");\\n        require(_amount > 0, \\\"Donation amount must be greater than 0\\\");\\n        require(supportedTokens[_token], \\\"Token not supported\\\");\\n        \\n        Content storage content = contents[key];\\n        \\n        // Transfer tokens from donor to contract\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        \\n        // Calculate platform fee\\n        uint256 fee = (_amount * platformFee) / 10000;\\n        uint256 creatorAmount = _amount - fee;\\n        \\n        // Update content stats (we track total in Wei/smallest unit equivalent)\\n        content.totalDonationsReceived += creatorAmount;\\n        content.donationCount++;\\n        \\n        // Update creator earnings\\n        creatorEarnings[content.owner][_token] += creatorAmount;\\n        \\n        // Update donor stats\\n        donorTotalDonations[msg.sender][_token] += _amount;\\n        \\n        // Create donation record\\n        donations[totalDonations] = Donation({\\n            donor: msg.sender,\\n            contentOwner: content.owner,\\n            amount: _amount,\\n            timestamp: block.timestamp,\\n            contentUsername: _username,\\n            contentPlatform: _platform,\\n            token: _token\\n        });\\n        \\n        // Add donation ID to content donations\\n        contentDonations[key].push(totalDonations);\\n        \\n        totalDonations++;\\n        \\n        emit DonationMade(\\n            msg.sender, \\n            content.owner, \\n            _username,\\n            _platform,\\n            _amount, \\n            totalDonations - 1, \\n            block.timestamp,\\n            _token\\n        );\\n    }\\n    \\n    /**\\n     * Allow creators to withdraw their ETH earnings\\n     */\\n    function withdrawEthEarnings() public nonReentrant {\\n        uint256 amount = creatorEarnings[msg.sender][address(0)];\\n        require(amount > 0, \\\"No ETH earnings to withdraw\\\");\\n        \\n        creatorEarnings[msg.sender][address(0)] = 0;\\n        \\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(success, \\\"ETH withdrawal failed\\\");\\n        \\n        emit WithdrawalMade(msg.sender, amount, address(0));\\n    }\\n    \\n    /**\\n     * Allow creators to withdraw their token earnings\\n     * @param _token The token address to withdraw\\n     */\\n    function withdrawTokenEarnings(address _token) public nonReentrant {\\n        require(supportedTokens[_token], \\\"Token not supported\\\");\\n        uint256 amount = creatorEarnings[msg.sender][_token];\\n        require(amount > 0, \\\"No token earnings to withdraw\\\");\\n        \\n        creatorEarnings[msg.sender][_token] = 0;\\n        \\n        IERC20(_token).safeTransfer(msg.sender, amount);\\n        \\n        emit WithdrawalMade(msg.sender, amount, _token);\\n    }\\n    \\n    /**\\n     * Withdraw all earnings for a creator (ETH + all supported tokens)\\n     */\\n    function withdrawAllEarnings() public nonReentrant {\\n        bool hasWithdrawn = false;\\n        \\n        // Withdraw ETH earnings\\n        uint256 ethAmount = creatorEarnings[msg.sender][address(0)];\\n        if (ethAmount > 0) {\\n            creatorEarnings[msg.sender][address(0)] = 0;\\n            (bool success, ) = msg.sender.call{value: ethAmount}(\\\"\\\");\\n            require(success, \\\"ETH withdrawal failed\\\");\\n            emit WithdrawalMade(msg.sender, ethAmount, address(0));\\n            hasWithdrawn = true;\\n        }\\n        \\n        // Withdraw token earnings\\n        for (uint256 i = 0; i < supportedTokenList.length; i++) {\\n            address token = supportedTokenList[i];\\n            uint256 tokenAmount = creatorEarnings[msg.sender][token];\\n            if (tokenAmount > 0) {\\n                creatorEarnings[msg.sender][token] = 0;\\n                IERC20(token).safeTransfer(msg.sender, tokenAmount);\\n                emit WithdrawalMade(msg.sender, tokenAmount, token);\\n                hasWithdrawn = true;\\n            }\\n        }\\n        \\n        require(hasWithdrawn, \\\"No earnings to withdraw\\\");\\n    }\\n    \\n    /**\\n     * Deactivate content (only by content owner)\\n     * @param _username The username to deactivate\\n     * @param _platform The platform of the content\\n     */\\n    function deactivateContent(string memory _username, string memory _platform) \\n        public \\n    {\\n        string memory key = _createKey(_username, _platform);\\n        require(bytes(contents[key].username).length > 0, \\\"Content does not exist\\\");\\n        require(contents[key].owner == msg.sender, \\\"Not the content owner\\\");\\n        \\n        contents[key].isActive = false;\\n        emit ContentDeactivated(_username, _platform, msg.sender);\\n    }\\n    \\n    /**\\n     * Reactivate content (only by content owner)\\n     * @param _username The username to reactivate\\n     * @param _platform The platform of the content\\n     */\\n    function reactivateContent(string memory _username, string memory _platform) \\n        public \\n    {\\n        string memory key = _createKey(_username, _platform);\\n        require(bytes(contents[key].username).length > 0, \\\"Content does not exist\\\");\\n        require(contents[key].owner == msg.sender, \\\"Not the content owner\\\");\\n        \\n        contents[key].isActive = true;\\n        emit ContentReactivated(_username, _platform, msg.sender);\\n    }\\n    \\n    /**\\n     * Get content information\\n     * @param _username The username\\n     * @param _platform The platform\\n     */\\n    function getContent(string memory _username, string memory _platform) \\n        public \\n        view \\n        returns (\\n            string memory username,\\n            string memory platform,\\n            address owner,\\n            uint256 totalDonationsReceived,\\n            uint256 donationCount,\\n            bool isActive,\\n            uint256 createdAt\\n        ) \\n    {\\n        string memory key = _createKey(_username, _platform);\\n        Content memory content = contents[key];\\n        return (\\n            content.username,\\n            content.platform,\\n            content.owner,\\n            content.totalDonationsReceived,\\n            content.donationCount,\\n            content.isActive,\\n            content.createdAt\\n        );\\n    }\\n    \\n    /**\\n     * Get all content keys (username-at-platform) by a creator\\n     * @param _creator The creator's address\\n     */\\n    function getCreatorContents(address _creator) \\n        public \\n        view \\n        returns (string[] memory) \\n    {\\n        return creatorContents[_creator];\\n    }\\n    \\n    /**\\n     * Get donation IDs for a specific content\\n     * @param _username The username\\n     * @param _platform The platform\\n     */\\n    function getContentDonations(string memory _username, string memory _platform) \\n        public \\n        view \\n        returns (uint256[] memory) \\n    {\\n        string memory key = _createKey(_username, _platform);\\n        return contentDonations[key];\\n    }\\n    \\n    /**\\n     * Check if content exists\\n     * @param _username The username to check\\n     * @param _platform The platform to check\\n     * @return bool True if content exists, false otherwise\\n     */\\n    function contentExistsCheck(string memory _username, string memory _platform) \\n        public \\n        view \\n        returns (bool) \\n    {\\n        string memory key = _createKey(_username, _platform);\\n        return bytes(contents[key].username).length > 0;\\n    }\\n    \\n    /**\\n     * Get donation details by ID\\n     * @param _donationId The donation ID\\n     */\\n    function getDonation(uint256 _donationId) \\n        public \\n        view \\n        returns (\\n            address donor,\\n            address contentOwner,\\n            uint256 amount,\\n            uint256 timestamp,\\n            string memory contentUsername,\\n            string memory contentPlatform,\\n            address token\\n        ) \\n    {\\n        Donation memory donation = donations[_donationId];\\n        return (\\n            donation.donor,\\n            donation.contentOwner,\\n            donation.amount,\\n            donation.timestamp,\\n            donation.contentUsername,\\n            donation.contentPlatform,\\n            donation.token\\n        );\\n    }\\n    \\n    /**\\n     * Get recent donations for a specific content\\n     * @param _username The username\\n     * @param _platform The platform\\n     * @param _limit The number of recent donations to return\\n     */\\n    function getRecentDonations(string memory _username, string memory _platform, uint256 _limit) \\n        public \\n        view \\n        returns (uint256[] memory) \\n    {\\n        string memory key = _createKey(_username, _platform);\\n        uint256[] memory contentDonationIds = contentDonations[key];\\n        uint256 length = contentDonationIds.length;\\n        \\n        if (length == 0) {\\n            return new uint256[](0);\\n        }\\n        \\n        uint256 limit = _limit > length ? length : _limit;\\n        uint256[] memory recentDonations = new uint256[](limit);\\n        \\n        for (uint256 i = 0; i < limit; i++) {\\n            recentDonations[i] = contentDonationIds[length - 1 - i];\\n        }\\n        \\n        return recentDonations;\\n    }\\n    \\n    /**\\n     * Get creator earnings for a specific token\\n     * @param _creator The creator's address\\n     * @param _token The token address (address(0) for ETH)\\n     */\\n    function getCreatorEarnings(address _creator, address _token) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        return creatorEarnings[_creator][_token];\\n    }\\n    \\n    /**\\n     * Get creator earnings for all tokens\\n     * @param _creator The creator's address\\n     */\\n    function getCreatorAllEarnings(address _creator) \\n        public \\n        view \\n        returns (address[] memory tokens, uint256[] memory amounts, string[] memory symbols) \\n    {\\n        // Include ETH + all supported tokens\\n        tokens = new address[](supportedTokenList.length + 1);\\n        amounts = new uint256[](supportedTokenList.length + 1);\\n        symbols = new string[](supportedTokenList.length + 1);\\n        \\n        // ETH earnings\\n        tokens[0] = address(0);\\n        amounts[0] = creatorEarnings[_creator][address(0)];\\n        symbols[0] = \\\"ETH\\\";\\n        \\n        // Token earnings\\n        for (uint256 i = 0; i < supportedTokenList.length; i++) {\\n            address token = supportedTokenList[i];\\n            tokens[i + 1] = token;\\n            amounts[i + 1] = creatorEarnings[_creator][token];\\n            symbols[i + 1] = tokenSymbols[token];\\n        }\\n    }\\n    \\n    /**\\n     * Get donor total donations for a specific token\\n     * @param _donor The donor's address\\n     * @param _token The token address (address(0) for ETH)\\n     */\\n    function getDonorTotalDonations(address _donor, address _token) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        return donorTotalDonations[_donor][_token];\\n    }\\n    \\n    /**\\n     * Get donor total donations for all tokens\\n     * @param _donor The donor's address\\n     */\\n    function getDonorAllDonations(address _donor) \\n        public \\n        view \\n        returns (address[] memory tokens, uint256[] memory amounts, string[] memory symbols) \\n    {\\n        // Include ETH + all supported tokens\\n        tokens = new address[](supportedTokenList.length + 1);\\n        amounts = new uint256[](supportedTokenList.length + 1);\\n        symbols = new string[](supportedTokenList.length + 1);\\n        \\n        // ETH donations\\n        tokens[0] = address(0);\\n        amounts[0] = donorTotalDonations[_donor][address(0)];\\n        symbols[0] = \\\"ETH\\\";\\n        \\n        // Token donations\\n        for (uint256 i = 0; i < supportedTokenList.length; i++) {\\n            address token = supportedTokenList[i];\\n            tokens[i + 1] = token;\\n            amounts[i + 1] = donorTotalDonations[_donor][token];\\n            symbols[i + 1] = tokenSymbols[token];\\n        }\\n    }\\n\\n    /**\\n     * Add a supported token (only contract owner)\\n     * @param _token The token address to add\\n     * @param _symbol The token symbol for display purposes\\n     */\\n    function addSupportedToken(address _token, string memory _symbol) \\n        public \\n        onlyContractOwner \\n    {\\n        require(_token != address(0), \\\"Invalid token address\\\");\\n        require(!supportedTokens[_token], \\\"Token already supported\\\");\\n        require(bytes(_symbol).length > 0, \\\"Symbol cannot be empty\\\");\\n        \\n        supportedTokens[_token] = true;\\n        tokenSymbols[_token] = _symbol;\\n        supportedTokenList.push(_token);\\n        \\n        emit TokenAdded(_token, _symbol);\\n    }\\n    \\n    /**\\n     * Remove a supported token (only contract owner)\\n     * @param _token The token address to remove\\n     */\\n    function removeSupportedToken(address _token) \\n        public \\n        onlyContractOwner \\n    {\\n        require(supportedTokens[_token], \\\"Token not supported\\\");\\n        \\n        supportedTokens[_token] = false;\\n        delete tokenSymbols[_token];\\n        \\n        // Remove from supportedTokenList\\n        for (uint256 i = 0; i < supportedTokenList.length; i++) {\\n            if (supportedTokenList[i] == _token) {\\n                supportedTokenList[i] = supportedTokenList[supportedTokenList.length - 1];\\n                supportedTokenList.pop();\\n                break;\\n            }\\n        }\\n        \\n        emit TokenRemoved(_token);\\n    }\\n    \\n    /**\\n     * Get all supported tokens\\n     */\\n    function getSupportedTokens() \\n        public \\n        view \\n        returns (address[] memory tokens, string[] memory symbols) \\n    {\\n        tokens = supportedTokenList;\\n        symbols = new string[](supportedTokenList.length);\\n        \\n        for (uint256 i = 0; i < supportedTokenList.length; i++) {\\n            symbols[i] = tokenSymbols[supportedTokenList[i]];\\n        }\\n    }\\n    \\n    /**\\n     * Get all supported platforms\\n     */\\n    function getSupportedPlatforms() \\n        public \\n        view \\n        returns (string[] memory) \\n    {\\n        return supportedPlatformList;\\n    }\\n    \\n    /**\\n     * Add a supported platform (only contract owner)\\n     * @param _platform The platform name to add\\n     */\\n    function addSupportedPlatform(string memory _platform) \\n        public \\n        onlyContractOwner \\n    {\\n        require(bytes(_platform).length > 0, \\\"Platform cannot be empty\\\");\\n        require(!supportedPlatforms[_platform], \\\"Platform already supported\\\");\\n        \\n        supportedPlatforms[_platform] = true;\\n        supportedPlatformList.push(_platform);\\n        \\n        emit PlatformAdded(_platform);\\n    }\\n    \\n    /**\\n     * Remove a supported platform (only contract owner)\\n     * @param _platform The platform name to remove\\n     */\\n    function removeSupportedPlatform(string memory _platform) \\n        public \\n        onlyContractOwner \\n    {\\n        require(supportedPlatforms[_platform], \\\"Platform not supported\\\");\\n        \\n        supportedPlatforms[_platform] = false;\\n        \\n        // Remove from supportedPlatformList\\n        for (uint256 i = 0; i < supportedPlatformList.length; i++) {\\n            if (keccak256(bytes(supportedPlatformList[i])) == keccak256(bytes(_platform))) {\\n                supportedPlatformList[i] = supportedPlatformList[supportedPlatformList.length - 1];\\n                supportedPlatformList.pop();\\n                break;\\n            }\\n        }\\n        \\n        emit PlatformRemoved(_platform);\\n    }\\n    \\n    /**\\n     * Change username for an existing content account\\n     * @param _oldUsername The current username\\n     * @param _newUsername The new username\\n     * @param _platform The platform of the content\\n     */\\n    function changeUsername(\\n        string memory _oldUsername, \\n        string memory _newUsername, \\n        string memory _platform\\n    ) \\n        public \\n    {\\n        require(bytes(_newUsername).length > 0, \\\"New username cannot be empty\\\");\\n        require(supportedPlatforms[_platform], \\\"Platform not supported\\\");\\n        \\n        string memory oldKey = _createKey(_oldUsername, _platform);\\n        string memory newKey = _createKey(_newUsername, _platform);\\n        \\n        require(bytes(contents[oldKey].username).length > 0, \\\"Old content does not exist\\\");\\n        require(contents[oldKey].owner == msg.sender, \\\"Not the content owner\\\");\\n        require(bytes(contents[newKey].username).length == 0, \\\"New username already exists\\\");\\n        \\n        // Copy content data to new key\\n        Content storage oldContent = contents[oldKey];\\n        contents[newKey] = Content({\\n            username: _newUsername,\\n            platform: _platform,\\n            owner: oldContent.owner,\\n            totalDonationsReceived: oldContent.totalDonationsReceived,\\n            donationCount: oldContent.donationCount,\\n            isActive: oldContent.isActive,\\n            createdAt: oldContent.createdAt\\n        });\\n        \\n        // Move donation records to new key\\n        contentDonations[newKey] = contentDonations[oldKey];\\n        delete contentDonations[oldKey];\\n        \\n        // Update all donation records to point to new username\\n        uint256[] memory donationIds = contentDonations[newKey];\\n        for (uint256 i = 0; i < donationIds.length; i++) {\\n            donations[donationIds[i]].contentUsername = _newUsername;\\n        }\\n        \\n        // Update creator contents array\\n        string[] storage creatorContentsList = creatorContents[msg.sender];\\n        for (uint256 i = 0; i < creatorContentsList.length; i++) {\\n            if (keccak256(bytes(creatorContentsList[i])) == keccak256(bytes(oldKey))) {\\n                creatorContentsList[i] = newKey;\\n                break;\\n            }\\n        }\\n        \\n        // Delete old content\\n        delete contents[oldKey];\\n        \\n        emit UsernameChanged(msg.sender, _oldUsername, _newUsername, _platform);\\n    }\\n    \\n    /**\\n     * Update platform fee (only contract owner)\\n     * @param _newFee New fee in basis points (e.g., 250 = 2.5%)\\n     */\\n    function updatePlatformFee(uint256 _newFee) public onlyContractOwner {\\n        require(_newFee <= 1000, \\\"Fee cannot exceed 10%\\\"); // Max 10%\\n        uint256 oldFee = platformFee;\\n        platformFee = _newFee;\\n        emit PlatformFeeUpdated(oldFee, _newFee);\\n    }\\n    \\n    /**\\n     * Get platform statistics\\n     */\\n    function getPlatformStats() \\n        public \\n        view \\n        returns (\\n            uint256 totalContentsCount,\\n            uint256 totalDonationsCount,\\n            uint256 currentPlatformFee\\n        ) \\n    {\\n        return (totalContents, totalDonations, platformFee);\\n    }\\n    \\n    /**\\n     * Withdraw platform fees in ETH (only contract owner)\\n     */\\n    function withdrawPlatformFeesEth() public onlyContractOwner nonReentrant {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0, \\\"No ETH fees to withdraw\\\");\\n        \\n        (bool success, ) = contractOwner.call{value: balance}(\\\"\\\");\\n        require(success, \\\"ETH fee withdrawal failed\\\");\\n    }\\n    \\n    /**\\n     * Withdraw platform fees in tokens (only contract owner)\\n     * @param _token The token address to withdraw fees for\\n     */\\n    function withdrawPlatformFeesToken(address _token) public onlyContractOwner nonReentrant {\\n        require(supportedTokens[_token], \\\"Token not supported\\\");\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        \\n        require(balance > 0, \\\"No token fees to withdraw\\\");\\n        IERC20(_token).safeTransfer(contractOwner, balance);\\n    }\\n    \\n    /**\\n     * Withdraw all platform fees (ETH + all tokens) (only contract owner)\\n     */\\n    function withdrawAllPlatformFees() public onlyContractOwner nonReentrant {\\n        // Withdraw ETH fees\\n        uint256 ethBalance = address(this).balance;\\n        if (ethBalance > 0) {\\n            (bool success, ) = contractOwner.call{value: ethBalance}(\\\"\\\");\\n            require(success, \\\"ETH fee withdrawal failed\\\");\\n        }\\n        \\n        // Withdraw token fees\\n        for (uint256 i = 0; i < supportedTokenList.length; i++) {\\n            address token = supportedTokenList[i];\\n            uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\n            if (tokenBalance > 0) {\\n                IERC20(token).safeTransfer(contractOwner, tokenBalance);\\n            }\\n        }\\n    }\\n    \\n    /**\\n     * Emergency function to transfer content ownership\\n     * @param _username The username\\n     * @param _platform The platform\\n     * @param _newOwner The new owner address\\n     */\\n    function transferContentOwnership(\\n        string memory _username, \\n        string memory _platform, \\n        address _newOwner\\n    ) \\n        public \\n    {\\n        string memory key = _createKey(_username, _platform);\\n        require(bytes(contents[key].username).length > 0, \\\"Content does not exist\\\");\\n        require(contents[key].owner == msg.sender, \\\"Not the content owner\\\");\\n        require(_newOwner != address(0), \\\"Invalid new owner address\\\");\\n        require(_newOwner != contents[key].owner, \\\"Same owner\\\");\\n        \\n        address oldOwner = contents[key].owner;\\n        contents[key].owner = _newOwner;\\n        \\n        // Update creator contents arrays\\n        string[] storage oldOwnerContents = creatorContents[oldOwner];\\n        for (uint256 i = 0; i < oldOwnerContents.length; i++) {\\n            if (keccak256(bytes(oldOwnerContents[i])) == keccak256(bytes(key))) {\\n                oldOwnerContents[i] = oldOwnerContents[oldOwnerContents.length - 1];\\n                oldOwnerContents.pop();\\n                break;\\n            }\\n        }\\n        \\n        creatorContents[_newOwner].push(key);\\n    }\\n    \\n    /**\\n     * Function that allows the contract to receive ETH\\n     */\\n    receive() external payable {}\\n    \\n    /**\\n     * Fallback function\\n     */\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x066250650eef603457858603c6d4459999c6478bbcf114a12a3685e542ec3348\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040526000600155600060025560fa6003553480156200002057600080fd5b5060405162005a4c38038062005a4c83398101604081905262000043916200031c565b600160008181556001600160a01b03831660805260408051650e8eed2e8c6d60d31b8082526007600680840182905284519384900360269081018520805460ff199081168a1790915566796f757475626560c81b865285840184905286519586900360279081018720805483168b1790556766616365626f6f6b60c01b875260088088018690528851978890036028018820805484168c1790556574696b746f6b60d01b88528785018690528851978890039093018720805483168b17905568696e7374616772616d60b81b8752600987018590528751968790036029018720805483168b179055663a3bb4ba3a32b960c91b875286850194909452865195869003909301852080549093168817909255815496870182559452818301909252918252602082015260008051602062005a2c833981519152909101906200018b9082620003f3565b5060088054600181018255600091909152604080518082019091526007815266796f757475626560c81b602082015260008051602062005a2c83398151915290910190620001da9082620003f3565b50600880546001810182556000829052604080518082019091529182526766616365626f6f6b60c01b602083015260008051602062005a2c8339815191520190620002269082620003f3565b506008805460018101825560009190915260408051808201909152600681526574696b746f6b60d01b602082015260008051602062005a2c83398151915290910190620002749082620003f3565b5060088054600181018255600091909152604080518082019091526009815268696e7374616772616d60b81b602082015260008051602062005a2c83398151915290910190620002c59082620003f3565b50600880546001810182556000919091526040805180820190915260078152663a3bb4ba3a32b960c91b602082015260008051602062005a2c83398151915290910190620003149082620003f3565b5050620004bf565b6000602082840312156200032f57600080fd5b81516001600160a01b03811681146200034757600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200037957607f821691505b6020821081036200039a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003ee57600081815260208120601f850160051c81016020861015620003c95750805b601f850160051c820191505b81811015620003ea57828155600101620003d5565b5050505b505050565b81516001600160401b038111156200040f576200040f6200034e565b620004278162000420845462000364565b84620003a0565b602080601f8311600181146200045f5760008415620004465750858301515b600019600386901b1c1916600185901b178555620003ea565b600085815260208120601f198616915b8281101562000490578886015182559484019460019091019084016200046f565b5085821015620004af5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080516154fd6200052f600039600081816107790152818161091f01528181610e2b01528181610ec20152818161144b01528181611594015281816128ef01528181612c340152818161335f0152818161343601528181613486015281816135f30152613f4301526154fd6000f3fe6080604052600436106102695760003560e01c80637bd3be2011610143578063ce606ee0116100bb578063dc0adf9b11610077578063dc0adf9b14610856578063de2ed89314610876578063ed30d9871461088c578063ef07a81f146108a1578063f8626af8146108d4578063fb0b2b36146108f457005b8063ce606ee014610767578063d2f22dbe1461079b578063d3c7c2c7146107bb578063d6804e50146107de578063d866dc9d146107fe578063d91205711461083657005b8063a6acce351161010a578063a6acce35146106a7578063aa0b5988146106c7578063b0825df3146106e7578063b8bc7b0e1461071f578063bb30eab114610734578063c43810591461074757005b80637bd3be20146105ec5780637e87addf1461060c578063935de8511461062c5780639881b46b146106415780639b3d24ee1461066157005b806340374733116101e157806368ea48e61161019d57806368ea48e6146105045780636ca115ff146105245780636dfa88191461055f578063720138e81461058c57806373154df3146105ac57806376319190146105cc57005b8063403747331461040f57806341ad125d1461043c5780634e9fea671461046f5780635d95b93d1461048f578063641a083d146104a457806368c4ac26146104c457005b806326232a2e1161023057806326232a2e1461033e5780632b60c822146103545780632f376ed61461038c57806331256666146103ac5780633848627b146103cc578063401a9685146103e257005b80630388bdf71461027257806305cbf0b214610292578063136d8883146102ca57806318dc0812146102fb5780631c784c2a1461031057005b3661027057005b005b34801561027e57600080fd5b5061027061028d366004614926565b610914565b34801561029e57600080fd5b506102b26102ad36600461497e565b610ad1565b6040516102c193929190614ab5565b60405180910390f35b3480156102d657600080fd5b50600154600254600354604080519384526020840192909252908201526060016102c1565b34801561030757600080fd5b50610270610e20565b34801561031c57600080fd5b5061033061032b366004614aee565b610f8b565b6040519081526020016102c1565b34801561034a57600080fd5b5061033060035481565b34801561036057600080fd5b5061037461036f366004614b32565b610fcb565b6040516001600160a01b0390911681526020016102c1565b34801561039857600080fd5b506102706103a7366004614b4b565b610ff5565b3480156103b857600080fd5b506102706103c736600461497e565b611440565b3480156103d857600080fd5b5061033060015481565b3480156103ee57600080fd5b506104026103fd366004614bc6565b6115c7565b6040516102c19190614bf0565b34801561041b57600080fd5b5061042f61042a36600461497e565b611680565b6040516102c19190614c03565b34801561044857600080fd5b5061045c610457366004614c16565b61176f565b6040516102c19796959493929190614c79565b34801561047b57600080fd5b5061027061048a366004614cd4565b611963565b34801561049b57600080fd5b50610270611f26565b3480156104b057600080fd5b506102706104bf366004614c16565b61214c565b3480156104d057600080fd5b506104f46104df36600461497e565b60046020526000908152604090205460ff1681565b60405190151581526020016102c1565b34801561051057600080fd5b506102b261051f36600461497e565b612429565b34801561053057600080fd5b506104f461053f366004614926565b805160208183018101805160078252928201919093012091525460ff1681565b34801561056b57600080fd5b5061057f61057a366004614d5b565b612770565b6040516102c19190614dc7565b34801561059857600080fd5b506102706105a7366004614dda565b6128e4565b3480156105b857600080fd5b506102706105c7366004614c16565b612aef565b3480156105d857600080fd5b506102706105e736600461497e565b612c29565b3480156105f857600080fd5b50610270610607366004614c16565b612e1c565b34801561061857600080fd5b5061027061062736600461497e565b612f56565b34801561063857600080fd5b50610270613074565b34801561064d57600080fd5b5061033061065c366004614e1d565b6131c3565b34801561066d57600080fd5b5061033061067c366004614e1d565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205490565b3480156106b357600080fd5b5061045c6106c2366004614926565b6131f0565b3480156106d357600080fd5b506102706106e2366004614b32565b613354565b3480156106f357600080fd5b50610330610702366004614e1d565b600c60209081526000928352604080842090915290825290205481565b34801561072b57600080fd5b5061027061342b565b610270610742366004614c16565b61362d565b34801561075357600080fd5b5061057f610762366004614c16565b6139b1565b34801561077357600080fd5b506103747f000000000000000000000000000000000000000000000000000000000000000081565b3480156107a757600080fd5b506102706107b6366004614e50565b613a31565b3480156107c757600080fd5b506107d0613d39565b6040516102c1929190614ec3565b3480156107ea57600080fd5b506104f46107f9366004614c16565b613ef1565b34801561080a57600080fd5b50610330610819366004614e1d565b600b60209081526000928352604080842090915290825290205481565b34801561084257600080fd5b50610270610851366004614926565b613f38565b34801561086257600080fd5b50610402610871366004614b32565b614119565b34801561088257600080fd5b5061033060025481565b34801561089857600080fd5b5061042f614144565b3480156108ad57600080fd5b506108c16108bc366004614b32565b61421d565b6040516102c19796959493929190614ef1565b3480156108e057600080fd5b506108c16108ef366004614b32565b6143f2565b34801561090057600080fd5b5061040261090f36600461497e565b614555565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109655760405162461bcd60e51b815260040161095c90614f51565b60405180910390fd5b60008151116109b15760405162461bcd60e51b8152602060048201526018602482015277506c6174666f726d2063616e6e6f7420626520656d70747960401b604482015260640161095c565b6007816040516109c19190614f81565b9081526040519081900360200190205460ff1615610a215760405162461bcd60e51b815260206004820152601a60248201527f506c6174666f726d20616c726561647920737570706f72746564000000000000604482015260640161095c565b6001600782604051610a339190614f81565b908152604051908190036020019020805491151560ff19909216919091179055600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301610a8f8282615025565b5080604051610a9e9190614f81565b604051908190038120907f39c39cf7ac9734eb147d1c97af14e25496dca114c888b83afbe570f2f7f5d2ff90600090a250565b60065460609081908190610ae69060016150fa565b6001600160401b03811115610afd57610afd614884565b604051908082528060200260200182016040528015610b26578160200160208202803683370190505b50600654909350610b389060016150fa565b6001600160401b03811115610b4f57610b4f614884565b604051908082528060200260200182016040528015610b78578160200160208202803683370190505b50600654909250610b8a9060016150fa565b6001600160401b03811115610ba157610ba1614884565b604051908082528060200260200182016040528015610bd457816020015b6060815260200190600190039081610bbf5790505b509050600083600081518110610bec57610bec61510d565b6001600160a01b039283166020918202929092018101919091529085166000908152600b8252604080822082805290925290812054835190918491610c3357610c3361510d565b6020026020010181815250506040518060400160405280600381526020016208aa8960eb1b81525081600081518110610c6e57610c6e61510d565b602002602001018190525060005b600654811015610e1857600060068281548110610c9b57610c9b61510d565b6000918252602090912001546001600160a01b031690508085610cbf8460016150fa565b81518110610ccf57610ccf61510d565b6001600160a01b039283166020918202929092018101919091528782166000908152600b82526040808220938516825292909152205484610d118460016150fa565b81518110610d2157610d2161510d565b60200260200101818152505060056000826001600160a01b03166001600160a01b031681526020019081526020016000208054610d5d90614f9d565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8990614f9d565b8015610dd65780601f10610dab57610100808354040283529160200191610dd6565b820191906000526020600020905b815481529060010190602001808311610db957829003601f168201915b505050505083836001610de991906150fa565b81518110610df957610df961510d565b6020026020010181905250508080610e1090615123565b915050610c7c565b509193909250565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e685760405162461bcd60e51b815260040161095c90614f51565b610e7061456e565b4780610ebe5760405162461bcd60e51b815260206004820152601760248201527f4e6f20455448206665657320746f207769746864726177000000000000000000604482015260640161095c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114610f2b576040519150601f19603f3d011682016040523d82523d6000602084013e610f30565b606091505b5050905080610f7d5760405162461bcd60e51b815260206004820152601960248201527811551208199959481dda5d1a191c985dd85b0819985a5b1959603a1b604482015260640161095c565b5050610f896001600055565b565b8151602081840181018051600e825292820191850191909120919052805482908110610fb657600080fd5b90600052602060002001600091509150505481565b60068181548110610fdb57600080fd5b6000918252602090912001546001600160a01b0316905081565b610ffd61456e565b60006110098585614598565b9050600060098260405161101d9190614f81565b908152604051908190036020019020805461103790614f9d565b9050116110565760405162461bcd60e51b815260040161095c9061513c565b6009816040516110669190614f81565b9081526040519081900360200190206005015460ff166110c05760405162461bcd60e51b8152602060048201526015602482015274436f6e74656e74206973206e6f742061637469766560581b604482015260640161095c565b600082116110e05760405162461bcd60e51b815260040161095c9061516c565b6001600160a01b03831660009081526004602052604090205460ff166111185760405162461bcd60e51b815260040161095c906151b2565b600060098260405161112a9190614f81565b90815260405190819003602001902090506111506001600160a01b0385163330866145c4565b60006127106003548561116391906151df565b61116d91906151f6565b9050600061117b8286615218565b90508083600301600082825461119191906150fa565b90915550506004830180549060006111a883615123565b909155505060028301546001600160a01b039081166000908152600b60209081526040808320938a16835292905290812080548392906111e99084906150fa565b9091555050336000908152600c602090815260408083206001600160a01b038a168452909152812080548792906112219084906150fa565b925050819055506040518060e00160405280336001600160a01b031681526020018460020160009054906101000a90046001600160a01b03166001600160a01b03168152602001868152602001428152602001898152602001888152602001876001600160a01b0316815250600d6000600254815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015560808201518160040190816113259190615025565b5060a0820151600582019061133a9082615025565b5060c09190910151600690910180546001600160a01b0319166001600160a01b03909216919091179055604051600e90611375908690614f81565b90815260405160209181900382019020600280548254600181018455600093845293832090930192909255815491906113ad83615123565b9190505550876040516113c09190614f81565b60405190819003902060028085015490546001600160a01b039091169033907f50ba6b67d6b9170aeaf5a08d95fa515ceb93c565365f478c49a3a2df8a54a41c908b908a9061141190600190615218565b428d60405161142495949392919061522b565b60405180910390a45050505061143a6001600055565b50505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114885760405162461bcd60e51b815260040161095c90614f51565b61149061456e565b6001600160a01b03811660009081526004602052604090205460ff166114c85760405162461bcd60e51b815260040161095c906151b2565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561150f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611533919061526b565b9050600081116115855760405162461bcd60e51b815260206004820152601960248201527f4e6f20746f6b656e206665657320746f20776974686472617700000000000000604482015260640161095c565b6115b96001600160a01b0383167f00000000000000000000000000000000000000000000000000000000000000008361462b565b506115c46001600055565b50565b600a60205281600052604060002081815481106115e357600080fd5b906000526020600020016000915091505080546115ff90614f9d565b80601f016020809104026020016040519081016040528092919081815260200182805461162b90614f9d565b80156116785780601f1061164d57610100808354040283529160200191611678565b820191906000526020600020905b81548152906001019060200180831161165b57829003601f168201915b505050505081565b6001600160a01b0381166000908152600a60209081526040808320805482518185028101850190935280835260609492939192909184015b828210156117645783829060005260206000200180546116d790614f9d565b80601f016020809104026020016040519081016040528092919081815260200182805461170390614f9d565b80156117505780601f1061172557610100808354040283529160200191611750565b820191906000526020600020905b81548152906001019060200180831161173357829003601f168201915b5050505050815260200190600101906116b8565b505050509050919050565b6060806000806000806000806117858a8a614598565b905060006009826040516117999190614f81565b90815260200160405180910390206040518060e00160405290816000820180546117c290614f9d565b80601f01602080910402602001604051908101604052809291908181526020018280546117ee90614f9d565b801561183b5780601f106118105761010080835404028352916020019161183b565b820191906000526020600020905b81548152906001019060200180831161181e57829003601f168201915b5050505050815260200160018201805461185490614f9d565b80601f016020809104026020016040519081016040528092919081815260200182805461188090614f9d565b80156118cd5780601f106118a2576101008083540402835291602001916118cd565b820191906000526020600020905b8154815290600101906020018083116118b057829003601f168201915b505050918352505060028201546001600160a01b031660208083019190915260038301546040808401919091526004840154606080850191909152600585015460ff16151560808086019190915260069095015460a0948501528551928601519186015190860151948601519386015160c090960151929e50909c509a5091985096509094509250505092959891949750929550565b60008251116119b45760405162461bcd60e51b815260206004820152601c60248201527f4e657720757365726e616d652063616e6e6f7420626520656d70747900000000604482015260640161095c565b6007816040516119c49190614f81565b9081526040519081900360200190205460ff166119f35760405162461bcd60e51b815260040161095c90615284565b60006119ff8483614598565b90506000611a0d8484614598565b90506000600983604051611a219190614f81565b9081526040519081900360200190208054611a3b90614f9d565b905011611a8a5760405162461bcd60e51b815260206004820152601a60248201527f4f6c6420636f6e74656e7420646f6573206e6f74206578697374000000000000604482015260640161095c565b336001600160a01b0316600983604051611aa49190614f81565b908152604051908190036020019020600201546001600160a01b031614611add5760405162461bcd60e51b815260040161095c906152b4565b600981604051611aed9190614f81565b9081526040519081900360200190208054611b0790614f9d565b159050611b565760405162461bcd60e51b815260206004820152601b60248201527f4e657720757365726e616d6520616c7265616479206578697374730000000000604482015260640161095c565b6000600983604051611b689190614f81565b90815260408051918290036020908101832060e08401835288845290830187905260028101546001600160a01b0316838301526003810154606084015260048101546080840152600581015460ff16151560a0840152600681015460c08401529051909250600990611bdb908590614f81565b90815260405190819003602001902081518190611bf89082615025565b5060208201516001820190611c0d9082615025565b506040828101516002830180546001600160a01b0319166001600160a01b03909216919091179055606083015160038301556080830151600483015560a083015160058301805460ff191691151591909117905560c09092015160069091015551600e90611c7c908590614f81565b9081526020016040518091039020600e83604051611c9a9190614f81565b9081526040519081900360200190208154611cb592906147cb565b50600e83604051611cc69190614f81565b90815260200160405180910390206000611ce0919061481b565b6000600e83604051611cf29190614f81565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015611d4457602002820191906000526020600020905b815481526020019060010190808311611d30575b5050505050905060005b8151811015611da65786600d6000848481518110611d6e57611d6e61510d565b602002602001015181526020019081526020016000206004019081611d939190615025565b5080611d9e81615123565b915050611d4e565b50336000908152600a60205260408120905b8154811015611e40578580519060200120828281548110611ddb57611ddb61510d565b90600052602060002001604051611df291906152e3565b604051809103902003611e2e5784828281548110611e1257611e1261510d565b906000526020600020019081611e289190615025565b50611e40565b80611e3881615123565b915050611db8565b50600985604051611e519190614f81565b9081526040519081900360200190206000611e6c8282614839565b611e7a600183016000614839565b506002810180546001600160a01b03191690556000600382018190556004820181905560058201805460ff19169055600690910155604051611ebd908890614f81565b604051809103902088604051611ed39190614f81565b6040518091039020336001600160a01b03167fa13d4bd452281d9e877efa3623f66f9b5812d245c309fe240dd62bee8392aa1f89604051611f149190614bf0565b60405180910390a45050505050505050565b611f2e61456e565b336000908152600b60209081526040808320838052909152812054801561202857336000818152600b602090815260408083208380529091528082208290555190919083908381818185875af1925050503d8060008114611fab576040519150601f19603f3d011682016040523d82523d6000602084013e611fb0565b606091505b5050905080611ff95760405162461bcd60e51b8152602060048201526015602482015274115512081dda5d1a191c985dd85b0819985a5b1959605a1b604482015260640161095c565b604080518381526000602082015233916000805160206154a8833981519152910160405180910390a260019250505b60005b6006548110156120fe5760006006828154811061204a5761204a61510d565b6000918252602080832090910154338352600b825260408084206001600160a01b039092168085529190925291205490915080156120e957336000818152600b602090815260408083206001600160a01b03871680855292528220919091556120b3918361462b565b604080518281526001600160a01b038416602082015233916000805160206154a8833981519152910160405180910390a2600194505b505080806120f690615123565b91505061202b565b5081610f7d5760405162461bcd60e51b815260206004820152601760248201527f4e6f206561726e696e677320746f207769746864726177000000000000000000604482015260640161095c565b600082511161219d5760405162461bcd60e51b815260206004820152601860248201527f557365726e616d652063616e6e6f7420626520656d7074790000000000000000604482015260640161095c565b60008151116121e95760405162461bcd60e51b8152602060048201526018602482015277506c6174666f726d2063616e6e6f7420626520656d70747960401b604482015260640161095c565b6007816040516121f99190614f81565b9081526040519081900360200190205460ff166122285760405162461bcd60e51b815260040161095c90615284565b60006122348383614598565b90506009816040516122469190614f81565b908152604051908190036020019020805461226090614f9d565b1590506122af5760405162461bcd60e51b815260206004820152601a60248201527f436f6e74656e7420616c72656164792072656769737465726564000000000000604482015260640161095c565b6040805160e0810182528481526020810184905233818301526000606082018190526080820152600160a08201524260c082015290516009906122f3908490614f81565b908152604051908190036020019020815181906123109082615025565b50602082015160018201906123259082615025565b506040828101516002830180546001600160a01b0319166001600160a01b03909216919091179055606083015160038301556080830151600483015560a083015160058301805460ff191691151591909117905560c090920151600690910155336000908152600a60209081529181208054600181018255908252919020016123ae8282615025565b50600180549060006123bf83615123565b909155505060405133906123d4908490614f81565b6040518091039020846040516123ea9190614f81565b604051908190038120428252907f82bdb4e42e12523905cf7f8f4050e844b1dd5e38abdf778cb042ac33e4f5ae529060200160405180910390a4505050565b6006546060908190819061243e9060016150fa565b6001600160401b0381111561245557612455614884565b60405190808252806020026020018201604052801561247e578160200160208202803683370190505b506006549093506124909060016150fa565b6001600160401b038111156124a7576124a7614884565b6040519080825280602002602001820160405280156124d0578160200160208202803683370190505b506006549092506124e29060016150fa565b6001600160401b038111156124f9576124f9614884565b60405190808252806020026020018201604052801561252c57816020015b60608152602001906001900390816125175790505b5090506000836000815181106125445761254461510d565b6001600160a01b039283166020918202929092018101919091529085166000908152600c825260408082208280529092529081205483519091849161258b5761258b61510d565b6020026020010181815250506040518060400160405280600381526020016208aa8960eb1b815250816000815181106125c6576125c661510d565b602002602001018190525060005b600654811015610e18576000600682815481106125f3576125f361510d565b6000918252602090912001546001600160a01b0316905080856126178460016150fa565b815181106126275761262761510d565b6001600160a01b039283166020918202929092018101919091528782166000908152600c825260408082209385168252929091522054846126698460016150fa565b815181106126795761267961510d565b60200260200101818152505060056000826001600160a01b03166001600160a01b0316815260200190815260200160002080546126b590614f9d565b80601f01602080910402602001604051908101604052809291908181526020018280546126e190614f9d565b801561272e5780601f106127035761010080835404028352916020019161272e565b820191906000526020600020905b81548152906001019060200180831161271157829003601f168201915b50505050508383600161274191906150fa565b815181106127515761275161510d565b602002602001018190525050808061276890615123565b9150506125d4565b6060600061277e8585614598565b90506000600e826040516127929190614f81565b90815260408051918290036020908101832080548083028501830190935282845291908301828280156127e457602002820191906000526020600020905b8154815260200190600101908083116127d0575b505050505090506000815190508060000361281357505060408051600081526020810190915291506128dd9050565b60008186116128225785612824565b815b90506000816001600160401b0381111561284057612840614884565b604051908082528060200260200182016040528015612869578160200160208202803683370190505b50905060005b828110156128d5578481612884600187615218565b61288e9190615218565b8151811061289e5761289e61510d565b60200260200101518282815181106128b8576128b861510d565b6020908102919091010152806128cd81615123565b91505061286f565b509450505050505b9392505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461292c5760405162461bcd60e51b815260040161095c90614f51565b6001600160a01b03821661297a5760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b604482015260640161095c565b6001600160a01b03821660009081526004602052604090205460ff16156129e35760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20616c726561647920737570706f72746564000000000000000000604482015260640161095c565b6000815111612a2d5760405162461bcd60e51b815260206004820152601660248201527553796d626f6c2063616e6e6f7420626520656d70747960501b604482015260640161095c565b6001600160a01b0382166000908152600460209081526040808320805460ff1916600117905560059091529020612a648282615025565b50600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b0384169081179091556040517f7afee0f1b802cc0f66c67890e26b4566251859cf2cd8de79b86aed7251d9756a90612ae3908490614bf0565b60405180910390a25050565b6000612afb8383614598565b90506000600982604051612b0f9190614f81565b9081526040519081900360200190208054612b2990614f9d565b905011612b485760405162461bcd60e51b815260040161095c9061513c565b336001600160a01b0316600982604051612b629190614f81565b908152604051908190036020019020600201546001600160a01b031614612b9b5760405162461bcd60e51b815260040161095c906152b4565b6000600982604051612bad9190614f81565b908152604051908190036020018120600501805492151560ff19909316929092179091553390612bde908490614f81565b604051809103902084604051612bf49190614f81565b604051908190038120907f7e5413de79f3b459d93bc0e7d6846bf317a1d9da5ad6b5aa54fbedb3ae390c7f90600090a4505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612c715760405162461bcd60e51b815260040161095c90614f51565b6001600160a01b03811660009081526004602052604090205460ff16612ca95760405162461bcd60e51b815260040161095c906151b2565b6001600160a01b0381166000908152600460209081526040808320805460ff1916905560059091528120612cdc91614839565b60005b600654811015612de457816001600160a01b031660068281548110612d0657612d0661510d565b6000918252602090912001546001600160a01b031603612dd25760068054612d3090600190615218565b81548110612d4057612d4061510d565b600091825260209091200154600680546001600160a01b039092169183908110612d6c57612d6c61510d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506006805480612dab57612dab615359565b600082815260209020810160001990810180546001600160a01b0319169055019055612de4565b80612ddc81615123565b915050612cdf565b506040516001600160a01b038216907f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd390600090a250565b6000612e288383614598565b90506000600982604051612e3c9190614f81565b9081526040519081900360200190208054612e5690614f9d565b905011612e755760405162461bcd60e51b815260040161095c9061513c565b336001600160a01b0316600982604051612e8f9190614f81565b908152604051908190036020019020600201546001600160a01b031614612ec85760405162461bcd60e51b815260040161095c906152b4565b6001600982604051612eda9190614f81565b908152604051908190036020018120600501805492151560ff19909316929092179091553390612f0b908490614f81565b604051809103902084604051612f219190614f81565b604051908190038120907f36b966d48b2037297335e5b7354585d6a3db1cb4e21bd21df20d1c33a575e45590600090a4505050565b612f5e61456e565b6001600160a01b03811660009081526004602052604090205460ff16612f965760405162461bcd60e51b815260040161095c906151b2565b336000908152600b602090815260408083206001600160a01b0385168452909152902054806130075760405162461bcd60e51b815260206004820152601d60248201527f4e6f20746f6b656e206561726e696e677320746f207769746864726177000000604482015260640161095c565b336000818152600b602090815260408083206001600160a01b0387168085529252822091909155613038918361462b565b604080518281526001600160a01b038416602082015233916000805160206154a8833981519152910160405180910390a2506115c46001600055565b61307c61456e565b336000908152600b60209081526040808320838052909152902054806130e45760405162461bcd60e51b815260206004820152601b60248201527f4e6f20455448206561726e696e677320746f2077697468647261770000000000604482015260640161095c565b336000818152600b602090815260408083208380529091528082208290555190919083908381818185875af1925050503d8060008114613140576040519150601f19603f3d011682016040523d82523d6000602084013e613145565b606091505b505090508061318e5760405162461bcd60e51b8152602060048201526015602482015274115512081dda5d1a191c985dd85b0819985a5b1959605a1b604482015260640161095c565b604080518381526000602082015233916000805160206154a8833981519152910160405180910390a25050610f896001600055565b6001600160a01b038083166000908152600c60209081526040808320938516835292905220545b92915050565b805160208183018101805160098252928201919093012091528054819061321690614f9d565b80601f016020809104026020016040519081016040528092919081815260200182805461324290614f9d565b801561328f5780601f106132645761010080835404028352916020019161328f565b820191906000526020600020905b81548152906001019060200180831161327257829003601f168201915b5050505050908060010180546132a490614f9d565b80601f01602080910402602001604051908101604052809291908181526020018280546132d090614f9d565b801561331d5780601f106132f25761010080835404028352916020019161331d565b820191906000526020600020905b81548152906001019060200180831161330057829003601f168201915b50505050600283015460038401546004850154600586015460069096015494956001600160a01b03909316949193509160ff169087565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461339c5760405162461bcd60e51b815260040161095c90614f51565b6103e88111156133e65760405162461bcd60e51b81526020600482015260156024820152744665652063616e6e6f74206578636565642031302560581b604482015260640161095c565b600380549082905560408051828152602081018490527fd347e206f25a89b917fc9482f1a2d294d749baa4dc9bde7fb495ee11fe491643910160405180910390a15050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146134735760405162461bcd60e51b815260040161095c90614f51565b61347b61456e565b4780156135435760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d80600081146134ef576040519150601f19603f3d011682016040523d82523d6000602084013e6134f4565b606091505b50509050806135415760405162461bcd60e51b815260206004820152601960248201527811551208199959481dda5d1a191c985dd85b0819985a5b1959603a1b604482015260640161095c565b505b60005b600654811015610f7d576000600682815481106135655761356561510d565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa1580156135b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135dc919061526b565b90508015613618576136186001600160a01b0383167f00000000000000000000000000000000000000000000000000000000000000008361462b565b5050808061362590615123565b915050613546565b60006136398383614598565b9050600060098260405161364d9190614f81565b908152604051908190036020019020805461366790614f9d565b9050116136865760405162461bcd60e51b815260040161095c9061513c565b6009816040516136969190614f81565b9081526040519081900360200190206005015460ff166136f05760405162461bcd60e51b8152602060048201526015602482015274436f6e74656e74206973206e6f742061637469766560581b604482015260640161095c565b600034116137105760405162461bcd60e51b815260040161095c9061516c565b60006009826040516137229190614f81565b9081526020016040518091039020905060006127106003543461374591906151df565b61374f91906151f6565b9050600061375d8234615218565b90508083600301600082825461377391906150fa565b909155505060048301805490600061378a83615123565b909155505060028301546001600160a01b03166000908152600b60209081526040808320838052909152812080548392906137c69084906150fa565b9091555050336000908152600c60209081526040808320838052909152812080543492906137f59084906150fa565b90915550506040805160e0810182523381526002808601546001600160a01b039081166020808501918252348587019081524260608701908152608087018e815260a088018e9052600060c0890181905287548152600d90945297909220865181549086166001600160a01b0319918216178255935160018201805491909616941693909317909355915192810192909255516003820155915190919060048201906138a19082615025565b5060a082015160058201906138b69082615025565b5060c09190910151600690910180546001600160a01b0319166001600160a01b03909216919091179055604051600e906138f1908690614f81565b908152604051602091819003820190206002805482546001810184556000938452938320909301929092558154919061392983615123565b91905055508560405161393c9190614f81565b60405190819003902060028085015490546001600160a01b039091169033907f50ba6b67d6b9170aeaf5a08d95fa515ceb93c565365f478c49a3a2df8a54a41c908990349061398d90600190615218565b4260006040516139a195949392919061522b565b60405180910390a4505050505050565b606060006139bf8484614598565b9050600e816040516139d19190614f81565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015613a2357602002820191906000526020600020905b815481526020019060010190808311613a0f575b505050505091505092915050565b6000613a3d8484614598565b90506000600982604051613a519190614f81565b9081526040519081900360200190208054613a6b90614f9d565b905011613a8a5760405162461bcd60e51b815260040161095c9061513c565b336001600160a01b0316600982604051613aa49190614f81565b908152604051908190036020019020600201546001600160a01b031614613add5760405162461bcd60e51b815260040161095c906152b4565b6001600160a01b038216613b335760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206e6577206f776e6572206164647265737300000000000000604482015260640161095c565b600981604051613b439190614f81565b908152604051908190036020019020600201546001600160a01b0390811690831603613b9e5760405162461bcd60e51b815260206004820152600a60248201526929b0b6b29037bbb732b960b11b604482015260640161095c565b6000600982604051613bb09190614f81565b908152604051908190036020018120600201546001600160a01b031691508390600990613bde908590614f81565b908152604080516020928190038301902060020180546001600160a01b0319166001600160a01b039485161790559183166000908152600a909152908120905b8154811015613cfd578380519060200120828281548110613c4157613c4161510d565b90600052602060002001604051613c5891906152e3565b604051809103902003613ceb5781548290613c7590600190615218565b81548110613c8557613c8561510d565b90600052602060002001828281548110613ca157613ca161510d565b906000526020600020019081613cb7919061536f565b5081805480613cc857613cc8615359565b600190038181906000526020600020016000613ce49190614839565b9055613cfd565b80613cf581615123565b915050613c1e565b506001600160a01b0384166000908152600a6020908152604082208054600181018255908352912001613d308482615025565b50505050505050565b6060806006805480602002602001604051908101604052809291908181526020018280548015613d9257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d74575b505060065493955050506001600160401b038211159050613db557613db5614884565b604051908082528060200260200182016040528015613de857816020015b6060815260200190600190039081613dd35790505b50905060005b600654811015613eec576005600060068381548110613e0f57613e0f61510d565b60009182526020808320909101546001600160a01b0316835282019290925260400190208054613e3e90614f9d565b80601f0160208091040260200160405190810160405280929190818152602001828054613e6a90614f9d565b8015613eb75780601f10613e8c57610100808354040283529160200191613eb7565b820191906000526020600020905b815481529060010190602001808311613e9a57829003601f168201915b5050505050828281518110613ece57613ece61510d565b60200260200101819052508080613ee490615123565b915050613dee565b509091565b600080613efe8484614598565b90506000600982604051613f129190614f81565b9081526040519081900360200190208054613f2c90614f9d565b90501191505092915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614613f805760405162461bcd60e51b815260040161095c90614f51565b600781604051613f909190614f81565b9081526040519081900360200190205460ff16613fbf5760405162461bcd60e51b815260040161095c90615284565b6000600782604051613fd19190614f81565b908152604051908190036020019020805491151560ff1990921691909117905560005b6008548110156140d7578180519060200120600882815481106140195761401961510d565b9060005260206000200160405161403091906152e3565b6040518091039020036140c5576008805461404d90600190615218565b8154811061405d5761405d61510d565b906000526020600020016008828154811061407a5761407a61510d565b906000526020600020019081614090919061536f565b5060088054806140a2576140a2615359565b6001900381819060005260206000200160006140be9190614839565b90556140d7565b806140cf81615123565b915050613ff4565b50806040516140e69190614f81565b604051908190038120907f8068470e605465e644f90970e74a28f3ab98c829a51dc495da2e35978a5cfe5090600090a250565b6008818154811061412957600080fd5b9060005260206000200160009150905080546115ff90614f9d565b60606008805480602002602001604051908101604052809291908181526020016000905b8282101561421457838290600052602060002001805461418790614f9d565b80601f01602080910402602001604051908101604052809291908181526020018280546141b390614f9d565b80156142005780601f106141d557610100808354040283529160200191614200565b820191906000526020600020905b8154815290600101906020018083116141e357829003601f168201915b505050505081526020019060010190614168565b50505050905090565b6000818152600d60209081526040808320815160e08101835281546001600160a01b039081168252600183015416938101939093526002810154918301919091526003810154606083810191909152600482018054859485948594938493869384939092909160808401919061429290614f9d565b80601f01602080910402602001604051908101604052809291908181526020018280546142be90614f9d565b801561430b5780601f106142e05761010080835404028352916020019161430b565b820191906000526020600020905b8154815290600101906020018083116142ee57829003601f168201915b5050505050815260200160058201805461432490614f9d565b80601f016020809104026020016040519081016040528092919081815260200182805461435090614f9d565b801561439d5780601f106143725761010080835404028352916020019161439d565b820191906000526020600020905b81548152906001019060200180831161438057829003601f168201915b5050509183525050600691909101546001600160a01b031660209182015281519082015160408301516060840151608085015160a086015160c090960151949f939e50919c509a509850919650945092505050565b600d60205260009081526040902080546001820154600283015460038401546004850180546001600160a01b039586169694909516949293919261443590614f9d565b80601f016020809104026020016040519081016040528092919081815260200182805461446190614f9d565b80156144ae5780601f10614483576101008083540402835291602001916144ae565b820191906000526020600020905b81548152906001019060200180831161449157829003601f168201915b5050505050908060050180546144c390614f9d565b80601f01602080910402602001604051908101604052809291908181526020018280546144ef90614f9d565b801561453c5780601f106145115761010080835404028352916020019161453c565b820191906000526020600020905b81548152906001019060200180831161451f57829003601f168201915b505050600690930154919250506001600160a01b031687565b600560205260009081526040902080546115ff90614f9d565b60026000540361459157604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b606082826040516020016145ad929190615449565b604051602081830303815290604052905092915050565b6040516001600160a01b03848116602483015283811660448301526064820183905261143a9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050614661565b6040516001600160a01b0383811660248301526044820183905261465c91859182169063a9059cbb906064016145f9565b505050565b60006146766001600160a01b038416836146c4565b9050805160001415801561469b5750808060200190518101906146999190615485565b155b1561465c57604051635274afe760e01b81526001600160a01b038416600482015260240161095c565b60606128dd8383600084600080856001600160a01b031684866040516146ea9190614f81565b60006040518083038185875af1925050503d8060008114614727576040519150601f19603f3d011682016040523d82523d6000602084013e61472c565b606091505b509150915061473c868383614746565b9695505050505050565b60608261475b57614756826147a2565b6128dd565b815115801561477257506001600160a01b0384163b155b1561479b57604051639996b31560e01b81526001600160a01b038516600482015260240161095c565b50806128dd565b8051156147b25780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b82805482825590600052602060002090810192821561480b5760005260206000209182015b8281111561480b5782548255916001019190600101906147f0565b5061481792915061486f565b5090565b50805460008255906000526020600020908101906115c4919061486f565b50805461484590614f9d565b6000825580601f10614855575050565b601f0160209004906000526020600020908101906115c491905b5b808211156148175760008155600101614870565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126148ab57600080fd5b81356001600160401b03808211156148c5576148c5614884565b604051601f8301601f19908116603f011681019082821181831017156148ed576148ed614884565b8160405283815286602085880101111561490657600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561493857600080fd5b81356001600160401b0381111561494e57600080fd5b61495a8482850161489a565b949350505050565b80356001600160a01b038116811461497957600080fd5b919050565b60006020828403121561499057600080fd5b6128dd82614962565b600081518084526020808501945080840160005b838110156149d25781516001600160a01b0316875295820195908201906001016149ad565b509495945050505050565b600081518084526020808501945080840160005b838110156149d2578151875295820195908201906001016149f1565b60005b83811015614a28578181015183820152602001614a10565b50506000910152565b60008151808452614a49816020860160208601614a0d565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015614aa857601f19868403018952614a96838351614a31565b98840198925090830190600101614a7a565b5090979650505050505050565b606081526000614ac86060830186614999565b8281036020840152614ada81866149dd565b9050828103604084015261473c8185614a5d565b60008060408385031215614b0157600080fd5b82356001600160401b03811115614b1757600080fd5b614b238582860161489a565b95602094909401359450505050565b600060208284031215614b4457600080fd5b5035919050565b60008060008060808587031215614b6157600080fd5b84356001600160401b0380821115614b7857600080fd5b614b848883890161489a565b95506020870135915080821115614b9a57600080fd5b50614ba78782880161489a565b935050614bb660408601614962565b9396929550929360600135925050565b60008060408385031215614bd957600080fd5b614be283614962565b946020939093013593505050565b6020815260006128dd6020830184614a31565b6020815260006128dd6020830184614a5d565b60008060408385031215614c2957600080fd5b82356001600160401b0380821115614c4057600080fd5b614c4c8683870161489a565b93506020850135915080821115614c6257600080fd5b50614c6f8582860161489a565b9150509250929050565b60e081526000614c8c60e083018a614a31565b8281036020840152614c9e818a614a31565b6001600160a01b03989098166040840152505060608101949094526080840192909252151560a083015260c09091015292915050565b600080600060608486031215614ce957600080fd5b83356001600160401b0380821115614d0057600080fd5b614d0c8783880161489a565b94506020860135915080821115614d2257600080fd5b614d2e8783880161489a565b93506040860135915080821115614d4457600080fd5b50614d518682870161489a565b9150509250925092565b600080600060608486031215614d7057600080fd5b83356001600160401b0380821115614d8757600080fd5b614d938783880161489a565b94506020860135915080821115614da957600080fd5b50614db68682870161489a565b925050604084013590509250925092565b6020815260006128dd60208301846149dd565b60008060408385031215614ded57600080fd5b614df683614962565b915060208301356001600160401b03811115614e1157600080fd5b614c6f8582860161489a565b60008060408385031215614e3057600080fd5b614e3983614962565b9150614e4760208401614962565b90509250929050565b600080600060608486031215614e6557600080fd5b83356001600160401b0380821115614e7c57600080fd5b614e888783880161489a565b94506020860135915080821115614e9e57600080fd5b50614eab8682870161489a565b925050614eba60408501614962565b90509250925092565b604081526000614ed66040830185614999565b8281036020840152614ee88185614a5d565b95945050505050565b600060018060a01b03808a168352808916602084015287604084015286606084015260e06080840152614f2760e0840187614a31565b83810360a0850152614f398187614a31565b92505080841660c08401525098975050505050505050565b6020808252601690820152752737ba103a34329031b7b73a3930b1ba1037bbb732b960511b604082015260600190565b60008251614f93818460208701614a0d565b9190910192915050565b600181811c90821680614fb157607f821691505b602082108103614fd157634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561465c57600081815260208120601f850160051c81016020861015614ffe5750805b601f850160051c820191505b8181101561501d5782815560010161500a565b505050505050565b81516001600160401b0381111561503e5761503e614884565b6150528161504c8454614f9d565b84614fd7565b602080601f831160018114615087576000841561506f5750858301515b600019600386901b1c1916600185901b17855561501d565b600085815260208120601f198616915b828110156150b657888601518255948401946001909101908401615097565b50858210156150d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b808201808211156131ea576131ea6150e4565b634e487b7160e01b600052603260045260246000fd5b600060018201615135576151356150e4565b5060010190565b60208082526016908201527510dbdb9d195b9d08191bd95cc81b9bdd08195e1a5cdd60521b604082015260600190565b60208082526026908201527f446f6e6174696f6e20616d6f756e74206d75737420626520677265617465722060408201526507468616e20360d41b606082015260800190565b602080825260139082015272151bdad95b881b9bdd081cdd5c1c1bdc9d1959606a1b604082015260600190565b80820281158282048414176131ea576131ea6150e4565b60008261521357634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156131ea576131ea6150e4565b60a08152600061523e60a0830188614a31565b602083019690965250604081019390935260608301919091526001600160a01b0316608090910152919050565b60006020828403121561527d57600080fd5b5051919050565b602080825260169082015275141b185d199bdc9b481b9bdd081cdd5c1c1bdc9d195960521b604082015260600190565b6020808252601590820152742737ba103a34329031b7b73a32b73a1037bbb732b960591b604082015260600190565b60008083546152f181614f9d565b60018281168015615309576001811461531e5761534d565b60ff198416875282151583028701945061534d565b8760005260208060002060005b858110156153445781548a82015290840190820161532b565b50505082870194505b50929695505050505050565b634e487b7160e01b600052603160045260246000fd5b81810361537a575050565b6153848254614f9d565b6001600160401b0381111561539b5761539b614884565b6153a98161504c8454614f9d565b6000601f8211600181146153dd57600083156153c55750848201545b600019600385901b1c1916600184901b178455615442565b600085815260209020601f19841690600086815260209020845b8381101561541757828601548255600195860195909101906020016153f7565b50858310156154355781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b6000835161545b818460208801614a0d565b600160fe1b9083019081528351615479816001840160208801614a0d565b01600101949350505050565b60006020828403121561549757600080fd5b815180151581146128dd57600080fdfe565848cdb1369b8f0e5b0f6eb298a192163a96cf9f692903ec5f14cd2c0b7b65a2646970667358221220c33e0dac180597cd72f2b1fdab8d95e3c408ae563018b5fdc17bbb6765f47abd64736f6c63430008140033f3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3",
    "deployedBytecode": "0x6080604052600436106102695760003560e01c80637bd3be2011610143578063ce606ee0116100bb578063dc0adf9b11610077578063dc0adf9b14610856578063de2ed89314610876578063ed30d9871461088c578063ef07a81f146108a1578063f8626af8146108d4578063fb0b2b36146108f457005b8063ce606ee014610767578063d2f22dbe1461079b578063d3c7c2c7146107bb578063d6804e50146107de578063d866dc9d146107fe578063d91205711461083657005b8063a6acce351161010a578063a6acce35146106a7578063aa0b5988146106c7578063b0825df3146106e7578063b8bc7b0e1461071f578063bb30eab114610734578063c43810591461074757005b80637bd3be20146105ec5780637e87addf1461060c578063935de8511461062c5780639881b46b146106415780639b3d24ee1461066157005b806340374733116101e157806368ea48e61161019d57806368ea48e6146105045780636ca115ff146105245780636dfa88191461055f578063720138e81461058c57806373154df3146105ac57806376319190146105cc57005b8063403747331461040f57806341ad125d1461043c5780634e9fea671461046f5780635d95b93d1461048f578063641a083d146104a457806368c4ac26146104c457005b806326232a2e1161023057806326232a2e1461033e5780632b60c822146103545780632f376ed61461038c57806331256666146103ac5780633848627b146103cc578063401a9685146103e257005b80630388bdf71461027257806305cbf0b214610292578063136d8883146102ca57806318dc0812146102fb5780631c784c2a1461031057005b3661027057005b005b34801561027e57600080fd5b5061027061028d366004614926565b610914565b34801561029e57600080fd5b506102b26102ad36600461497e565b610ad1565b6040516102c193929190614ab5565b60405180910390f35b3480156102d657600080fd5b50600154600254600354604080519384526020840192909252908201526060016102c1565b34801561030757600080fd5b50610270610e20565b34801561031c57600080fd5b5061033061032b366004614aee565b610f8b565b6040519081526020016102c1565b34801561034a57600080fd5b5061033060035481565b34801561036057600080fd5b5061037461036f366004614b32565b610fcb565b6040516001600160a01b0390911681526020016102c1565b34801561039857600080fd5b506102706103a7366004614b4b565b610ff5565b3480156103b857600080fd5b506102706103c736600461497e565b611440565b3480156103d857600080fd5b5061033060015481565b3480156103ee57600080fd5b506104026103fd366004614bc6565b6115c7565b6040516102c19190614bf0565b34801561041b57600080fd5b5061042f61042a36600461497e565b611680565b6040516102c19190614c03565b34801561044857600080fd5b5061045c610457366004614c16565b61176f565b6040516102c19796959493929190614c79565b34801561047b57600080fd5b5061027061048a366004614cd4565b611963565b34801561049b57600080fd5b50610270611f26565b3480156104b057600080fd5b506102706104bf366004614c16565b61214c565b3480156104d057600080fd5b506104f46104df36600461497e565b60046020526000908152604090205460ff1681565b60405190151581526020016102c1565b34801561051057600080fd5b506102b261051f36600461497e565b612429565b34801561053057600080fd5b506104f461053f366004614926565b805160208183018101805160078252928201919093012091525460ff1681565b34801561056b57600080fd5b5061057f61057a366004614d5b565b612770565b6040516102c19190614dc7565b34801561059857600080fd5b506102706105a7366004614dda565b6128e4565b3480156105b857600080fd5b506102706105c7366004614c16565b612aef565b3480156105d857600080fd5b506102706105e736600461497e565b612c29565b3480156105f857600080fd5b50610270610607366004614c16565b612e1c565b34801561061857600080fd5b5061027061062736600461497e565b612f56565b34801561063857600080fd5b50610270613074565b34801561064d57600080fd5b5061033061065c366004614e1d565b6131c3565b34801561066d57600080fd5b5061033061067c366004614e1d565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205490565b3480156106b357600080fd5b5061045c6106c2366004614926565b6131f0565b3480156106d357600080fd5b506102706106e2366004614b32565b613354565b3480156106f357600080fd5b50610330610702366004614e1d565b600c60209081526000928352604080842090915290825290205481565b34801561072b57600080fd5b5061027061342b565b610270610742366004614c16565b61362d565b34801561075357600080fd5b5061057f610762366004614c16565b6139b1565b34801561077357600080fd5b506103747f000000000000000000000000000000000000000000000000000000000000000081565b3480156107a757600080fd5b506102706107b6366004614e50565b613a31565b3480156107c757600080fd5b506107d0613d39565b6040516102c1929190614ec3565b3480156107ea57600080fd5b506104f46107f9366004614c16565b613ef1565b34801561080a57600080fd5b50610330610819366004614e1d565b600b60209081526000928352604080842090915290825290205481565b34801561084257600080fd5b50610270610851366004614926565b613f38565b34801561086257600080fd5b50610402610871366004614b32565b614119565b34801561088257600080fd5b5061033060025481565b34801561089857600080fd5b5061042f614144565b3480156108ad57600080fd5b506108c16108bc366004614b32565b61421d565b6040516102c19796959493929190614ef1565b3480156108e057600080fd5b506108c16108ef366004614b32565b6143f2565b34801561090057600080fd5b5061040261090f36600461497e565b614555565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109655760405162461bcd60e51b815260040161095c90614f51565b60405180910390fd5b60008151116109b15760405162461bcd60e51b8152602060048201526018602482015277506c6174666f726d2063616e6e6f7420626520656d70747960401b604482015260640161095c565b6007816040516109c19190614f81565b9081526040519081900360200190205460ff1615610a215760405162461bcd60e51b815260206004820152601a60248201527f506c6174666f726d20616c726561647920737570706f72746564000000000000604482015260640161095c565b6001600782604051610a339190614f81565b908152604051908190036020019020805491151560ff19909216919091179055600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301610a8f8282615025565b5080604051610a9e9190614f81565b604051908190038120907f39c39cf7ac9734eb147d1c97af14e25496dca114c888b83afbe570f2f7f5d2ff90600090a250565b60065460609081908190610ae69060016150fa565b6001600160401b03811115610afd57610afd614884565b604051908082528060200260200182016040528015610b26578160200160208202803683370190505b50600654909350610b389060016150fa565b6001600160401b03811115610b4f57610b4f614884565b604051908082528060200260200182016040528015610b78578160200160208202803683370190505b50600654909250610b8a9060016150fa565b6001600160401b03811115610ba157610ba1614884565b604051908082528060200260200182016040528015610bd457816020015b6060815260200190600190039081610bbf5790505b509050600083600081518110610bec57610bec61510d565b6001600160a01b039283166020918202929092018101919091529085166000908152600b8252604080822082805290925290812054835190918491610c3357610c3361510d565b6020026020010181815250506040518060400160405280600381526020016208aa8960eb1b81525081600081518110610c6e57610c6e61510d565b602002602001018190525060005b600654811015610e1857600060068281548110610c9b57610c9b61510d565b6000918252602090912001546001600160a01b031690508085610cbf8460016150fa565b81518110610ccf57610ccf61510d565b6001600160a01b039283166020918202929092018101919091528782166000908152600b82526040808220938516825292909152205484610d118460016150fa565b81518110610d2157610d2161510d565b60200260200101818152505060056000826001600160a01b03166001600160a01b031681526020019081526020016000208054610d5d90614f9d565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8990614f9d565b8015610dd65780601f10610dab57610100808354040283529160200191610dd6565b820191906000526020600020905b815481529060010190602001808311610db957829003601f168201915b505050505083836001610de991906150fa565b81518110610df957610df961510d565b6020026020010181905250508080610e1090615123565b915050610c7c565b509193909250565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e685760405162461bcd60e51b815260040161095c90614f51565b610e7061456e565b4780610ebe5760405162461bcd60e51b815260206004820152601760248201527f4e6f20455448206665657320746f207769746864726177000000000000000000604482015260640161095c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114610f2b576040519150601f19603f3d011682016040523d82523d6000602084013e610f30565b606091505b5050905080610f7d5760405162461bcd60e51b815260206004820152601960248201527811551208199959481dda5d1a191c985dd85b0819985a5b1959603a1b604482015260640161095c565b5050610f896001600055565b565b8151602081840181018051600e825292820191850191909120919052805482908110610fb657600080fd5b90600052602060002001600091509150505481565b60068181548110610fdb57600080fd5b6000918252602090912001546001600160a01b0316905081565b610ffd61456e565b60006110098585614598565b9050600060098260405161101d9190614f81565b908152604051908190036020019020805461103790614f9d565b9050116110565760405162461bcd60e51b815260040161095c9061513c565b6009816040516110669190614f81565b9081526040519081900360200190206005015460ff166110c05760405162461bcd60e51b8152602060048201526015602482015274436f6e74656e74206973206e6f742061637469766560581b604482015260640161095c565b600082116110e05760405162461bcd60e51b815260040161095c9061516c565b6001600160a01b03831660009081526004602052604090205460ff166111185760405162461bcd60e51b815260040161095c906151b2565b600060098260405161112a9190614f81565b90815260405190819003602001902090506111506001600160a01b0385163330866145c4565b60006127106003548561116391906151df565b61116d91906151f6565b9050600061117b8286615218565b90508083600301600082825461119191906150fa565b90915550506004830180549060006111a883615123565b909155505060028301546001600160a01b039081166000908152600b60209081526040808320938a16835292905290812080548392906111e99084906150fa565b9091555050336000908152600c602090815260408083206001600160a01b038a168452909152812080548792906112219084906150fa565b925050819055506040518060e00160405280336001600160a01b031681526020018460020160009054906101000a90046001600160a01b03166001600160a01b03168152602001868152602001428152602001898152602001888152602001876001600160a01b0316815250600d6000600254815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015560808201518160040190816113259190615025565b5060a0820151600582019061133a9082615025565b5060c09190910151600690910180546001600160a01b0319166001600160a01b03909216919091179055604051600e90611375908690614f81565b90815260405160209181900382019020600280548254600181018455600093845293832090930192909255815491906113ad83615123565b9190505550876040516113c09190614f81565b60405190819003902060028085015490546001600160a01b039091169033907f50ba6b67d6b9170aeaf5a08d95fa515ceb93c565365f478c49a3a2df8a54a41c908b908a9061141190600190615218565b428d60405161142495949392919061522b565b60405180910390a45050505061143a6001600055565b50505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114885760405162461bcd60e51b815260040161095c90614f51565b61149061456e565b6001600160a01b03811660009081526004602052604090205460ff166114c85760405162461bcd60e51b815260040161095c906151b2565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561150f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611533919061526b565b9050600081116115855760405162461bcd60e51b815260206004820152601960248201527f4e6f20746f6b656e206665657320746f20776974686472617700000000000000604482015260640161095c565b6115b96001600160a01b0383167f00000000000000000000000000000000000000000000000000000000000000008361462b565b506115c46001600055565b50565b600a60205281600052604060002081815481106115e357600080fd5b906000526020600020016000915091505080546115ff90614f9d565b80601f016020809104026020016040519081016040528092919081815260200182805461162b90614f9d565b80156116785780601f1061164d57610100808354040283529160200191611678565b820191906000526020600020905b81548152906001019060200180831161165b57829003601f168201915b505050505081565b6001600160a01b0381166000908152600a60209081526040808320805482518185028101850190935280835260609492939192909184015b828210156117645783829060005260206000200180546116d790614f9d565b80601f016020809104026020016040519081016040528092919081815260200182805461170390614f9d565b80156117505780601f1061172557610100808354040283529160200191611750565b820191906000526020600020905b81548152906001019060200180831161173357829003601f168201915b5050505050815260200190600101906116b8565b505050509050919050565b6060806000806000806000806117858a8a614598565b905060006009826040516117999190614f81565b90815260200160405180910390206040518060e00160405290816000820180546117c290614f9d565b80601f01602080910402602001604051908101604052809291908181526020018280546117ee90614f9d565b801561183b5780601f106118105761010080835404028352916020019161183b565b820191906000526020600020905b81548152906001019060200180831161181e57829003601f168201915b5050505050815260200160018201805461185490614f9d565b80601f016020809104026020016040519081016040528092919081815260200182805461188090614f9d565b80156118cd5780601f106118a2576101008083540402835291602001916118cd565b820191906000526020600020905b8154815290600101906020018083116118b057829003601f168201915b505050918352505060028201546001600160a01b031660208083019190915260038301546040808401919091526004840154606080850191909152600585015460ff16151560808086019190915260069095015460a0948501528551928601519186015190860151948601519386015160c090960151929e50909c509a5091985096509094509250505092959891949750929550565b60008251116119b45760405162461bcd60e51b815260206004820152601c60248201527f4e657720757365726e616d652063616e6e6f7420626520656d70747900000000604482015260640161095c565b6007816040516119c49190614f81565b9081526040519081900360200190205460ff166119f35760405162461bcd60e51b815260040161095c90615284565b60006119ff8483614598565b90506000611a0d8484614598565b90506000600983604051611a219190614f81565b9081526040519081900360200190208054611a3b90614f9d565b905011611a8a5760405162461bcd60e51b815260206004820152601a60248201527f4f6c6420636f6e74656e7420646f6573206e6f74206578697374000000000000604482015260640161095c565b336001600160a01b0316600983604051611aa49190614f81565b908152604051908190036020019020600201546001600160a01b031614611add5760405162461bcd60e51b815260040161095c906152b4565b600981604051611aed9190614f81565b9081526040519081900360200190208054611b0790614f9d565b159050611b565760405162461bcd60e51b815260206004820152601b60248201527f4e657720757365726e616d6520616c7265616479206578697374730000000000604482015260640161095c565b6000600983604051611b689190614f81565b90815260408051918290036020908101832060e08401835288845290830187905260028101546001600160a01b0316838301526003810154606084015260048101546080840152600581015460ff16151560a0840152600681015460c08401529051909250600990611bdb908590614f81565b90815260405190819003602001902081518190611bf89082615025565b5060208201516001820190611c0d9082615025565b506040828101516002830180546001600160a01b0319166001600160a01b03909216919091179055606083015160038301556080830151600483015560a083015160058301805460ff191691151591909117905560c09092015160069091015551600e90611c7c908590614f81565b9081526020016040518091039020600e83604051611c9a9190614f81565b9081526040519081900360200190208154611cb592906147cb565b50600e83604051611cc69190614f81565b90815260200160405180910390206000611ce0919061481b565b6000600e83604051611cf29190614f81565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015611d4457602002820191906000526020600020905b815481526020019060010190808311611d30575b5050505050905060005b8151811015611da65786600d6000848481518110611d6e57611d6e61510d565b602002602001015181526020019081526020016000206004019081611d939190615025565b5080611d9e81615123565b915050611d4e565b50336000908152600a60205260408120905b8154811015611e40578580519060200120828281548110611ddb57611ddb61510d565b90600052602060002001604051611df291906152e3565b604051809103902003611e2e5784828281548110611e1257611e1261510d565b906000526020600020019081611e289190615025565b50611e40565b80611e3881615123565b915050611db8565b50600985604051611e519190614f81565b9081526040519081900360200190206000611e6c8282614839565b611e7a600183016000614839565b506002810180546001600160a01b03191690556000600382018190556004820181905560058201805460ff19169055600690910155604051611ebd908890614f81565b604051809103902088604051611ed39190614f81565b6040518091039020336001600160a01b03167fa13d4bd452281d9e877efa3623f66f9b5812d245c309fe240dd62bee8392aa1f89604051611f149190614bf0565b60405180910390a45050505050505050565b611f2e61456e565b336000908152600b60209081526040808320838052909152812054801561202857336000818152600b602090815260408083208380529091528082208290555190919083908381818185875af1925050503d8060008114611fab576040519150601f19603f3d011682016040523d82523d6000602084013e611fb0565b606091505b5050905080611ff95760405162461bcd60e51b8152602060048201526015602482015274115512081dda5d1a191c985dd85b0819985a5b1959605a1b604482015260640161095c565b604080518381526000602082015233916000805160206154a8833981519152910160405180910390a260019250505b60005b6006548110156120fe5760006006828154811061204a5761204a61510d565b6000918252602080832090910154338352600b825260408084206001600160a01b039092168085529190925291205490915080156120e957336000818152600b602090815260408083206001600160a01b03871680855292528220919091556120b3918361462b565b604080518281526001600160a01b038416602082015233916000805160206154a8833981519152910160405180910390a2600194505b505080806120f690615123565b91505061202b565b5081610f7d5760405162461bcd60e51b815260206004820152601760248201527f4e6f206561726e696e677320746f207769746864726177000000000000000000604482015260640161095c565b600082511161219d5760405162461bcd60e51b815260206004820152601860248201527f557365726e616d652063616e6e6f7420626520656d7074790000000000000000604482015260640161095c565b60008151116121e95760405162461bcd60e51b8152602060048201526018602482015277506c6174666f726d2063616e6e6f7420626520656d70747960401b604482015260640161095c565b6007816040516121f99190614f81565b9081526040519081900360200190205460ff166122285760405162461bcd60e51b815260040161095c90615284565b60006122348383614598565b90506009816040516122469190614f81565b908152604051908190036020019020805461226090614f9d565b1590506122af5760405162461bcd60e51b815260206004820152601a60248201527f436f6e74656e7420616c72656164792072656769737465726564000000000000604482015260640161095c565b6040805160e0810182528481526020810184905233818301526000606082018190526080820152600160a08201524260c082015290516009906122f3908490614f81565b908152604051908190036020019020815181906123109082615025565b50602082015160018201906123259082615025565b506040828101516002830180546001600160a01b0319166001600160a01b03909216919091179055606083015160038301556080830151600483015560a083015160058301805460ff191691151591909117905560c090920151600690910155336000908152600a60209081529181208054600181018255908252919020016123ae8282615025565b50600180549060006123bf83615123565b909155505060405133906123d4908490614f81565b6040518091039020846040516123ea9190614f81565b604051908190038120428252907f82bdb4e42e12523905cf7f8f4050e844b1dd5e38abdf778cb042ac33e4f5ae529060200160405180910390a4505050565b6006546060908190819061243e9060016150fa565b6001600160401b0381111561245557612455614884565b60405190808252806020026020018201604052801561247e578160200160208202803683370190505b506006549093506124909060016150fa565b6001600160401b038111156124a7576124a7614884565b6040519080825280602002602001820160405280156124d0578160200160208202803683370190505b506006549092506124e29060016150fa565b6001600160401b038111156124f9576124f9614884565b60405190808252806020026020018201604052801561252c57816020015b60608152602001906001900390816125175790505b5090506000836000815181106125445761254461510d565b6001600160a01b039283166020918202929092018101919091529085166000908152600c825260408082208280529092529081205483519091849161258b5761258b61510d565b6020026020010181815250506040518060400160405280600381526020016208aa8960eb1b815250816000815181106125c6576125c661510d565b602002602001018190525060005b600654811015610e18576000600682815481106125f3576125f361510d565b6000918252602090912001546001600160a01b0316905080856126178460016150fa565b815181106126275761262761510d565b6001600160a01b039283166020918202929092018101919091528782166000908152600c825260408082209385168252929091522054846126698460016150fa565b815181106126795761267961510d565b60200260200101818152505060056000826001600160a01b03166001600160a01b0316815260200190815260200160002080546126b590614f9d565b80601f01602080910402602001604051908101604052809291908181526020018280546126e190614f9d565b801561272e5780601f106127035761010080835404028352916020019161272e565b820191906000526020600020905b81548152906001019060200180831161271157829003601f168201915b50505050508383600161274191906150fa565b815181106127515761275161510d565b602002602001018190525050808061276890615123565b9150506125d4565b6060600061277e8585614598565b90506000600e826040516127929190614f81565b90815260408051918290036020908101832080548083028501830190935282845291908301828280156127e457602002820191906000526020600020905b8154815260200190600101908083116127d0575b505050505090506000815190508060000361281357505060408051600081526020810190915291506128dd9050565b60008186116128225785612824565b815b90506000816001600160401b0381111561284057612840614884565b604051908082528060200260200182016040528015612869578160200160208202803683370190505b50905060005b828110156128d5578481612884600187615218565b61288e9190615218565b8151811061289e5761289e61510d565b60200260200101518282815181106128b8576128b861510d565b6020908102919091010152806128cd81615123565b91505061286f565b509450505050505b9392505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461292c5760405162461bcd60e51b815260040161095c90614f51565b6001600160a01b03821661297a5760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b604482015260640161095c565b6001600160a01b03821660009081526004602052604090205460ff16156129e35760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20616c726561647920737570706f72746564000000000000000000604482015260640161095c565b6000815111612a2d5760405162461bcd60e51b815260206004820152601660248201527553796d626f6c2063616e6e6f7420626520656d70747960501b604482015260640161095c565b6001600160a01b0382166000908152600460209081526040808320805460ff1916600117905560059091529020612a648282615025565b50600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b0384169081179091556040517f7afee0f1b802cc0f66c67890e26b4566251859cf2cd8de79b86aed7251d9756a90612ae3908490614bf0565b60405180910390a25050565b6000612afb8383614598565b90506000600982604051612b0f9190614f81565b9081526040519081900360200190208054612b2990614f9d565b905011612b485760405162461bcd60e51b815260040161095c9061513c565b336001600160a01b0316600982604051612b629190614f81565b908152604051908190036020019020600201546001600160a01b031614612b9b5760405162461bcd60e51b815260040161095c906152b4565b6000600982604051612bad9190614f81565b908152604051908190036020018120600501805492151560ff19909316929092179091553390612bde908490614f81565b604051809103902084604051612bf49190614f81565b604051908190038120907f7e5413de79f3b459d93bc0e7d6846bf317a1d9da5ad6b5aa54fbedb3ae390c7f90600090a4505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612c715760405162461bcd60e51b815260040161095c90614f51565b6001600160a01b03811660009081526004602052604090205460ff16612ca95760405162461bcd60e51b815260040161095c906151b2565b6001600160a01b0381166000908152600460209081526040808320805460ff1916905560059091528120612cdc91614839565b60005b600654811015612de457816001600160a01b031660068281548110612d0657612d0661510d565b6000918252602090912001546001600160a01b031603612dd25760068054612d3090600190615218565b81548110612d4057612d4061510d565b600091825260209091200154600680546001600160a01b039092169183908110612d6c57612d6c61510d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506006805480612dab57612dab615359565b600082815260209020810160001990810180546001600160a01b0319169055019055612de4565b80612ddc81615123565b915050612cdf565b506040516001600160a01b038216907f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd390600090a250565b6000612e288383614598565b90506000600982604051612e3c9190614f81565b9081526040519081900360200190208054612e5690614f9d565b905011612e755760405162461bcd60e51b815260040161095c9061513c565b336001600160a01b0316600982604051612e8f9190614f81565b908152604051908190036020019020600201546001600160a01b031614612ec85760405162461bcd60e51b815260040161095c906152b4565b6001600982604051612eda9190614f81565b908152604051908190036020018120600501805492151560ff19909316929092179091553390612f0b908490614f81565b604051809103902084604051612f219190614f81565b604051908190038120907f36b966d48b2037297335e5b7354585d6a3db1cb4e21bd21df20d1c33a575e45590600090a4505050565b612f5e61456e565b6001600160a01b03811660009081526004602052604090205460ff16612f965760405162461bcd60e51b815260040161095c906151b2565b336000908152600b602090815260408083206001600160a01b0385168452909152902054806130075760405162461bcd60e51b815260206004820152601d60248201527f4e6f20746f6b656e206561726e696e677320746f207769746864726177000000604482015260640161095c565b336000818152600b602090815260408083206001600160a01b0387168085529252822091909155613038918361462b565b604080518281526001600160a01b038416602082015233916000805160206154a8833981519152910160405180910390a2506115c46001600055565b61307c61456e565b336000908152600b60209081526040808320838052909152902054806130e45760405162461bcd60e51b815260206004820152601b60248201527f4e6f20455448206561726e696e677320746f2077697468647261770000000000604482015260640161095c565b336000818152600b602090815260408083208380529091528082208290555190919083908381818185875af1925050503d8060008114613140576040519150601f19603f3d011682016040523d82523d6000602084013e613145565b606091505b505090508061318e5760405162461bcd60e51b8152602060048201526015602482015274115512081dda5d1a191c985dd85b0819985a5b1959605a1b604482015260640161095c565b604080518381526000602082015233916000805160206154a8833981519152910160405180910390a25050610f896001600055565b6001600160a01b038083166000908152600c60209081526040808320938516835292905220545b92915050565b805160208183018101805160098252928201919093012091528054819061321690614f9d565b80601f016020809104026020016040519081016040528092919081815260200182805461324290614f9d565b801561328f5780601f106132645761010080835404028352916020019161328f565b820191906000526020600020905b81548152906001019060200180831161327257829003601f168201915b5050505050908060010180546132a490614f9d565b80601f01602080910402602001604051908101604052809291908181526020018280546132d090614f9d565b801561331d5780601f106132f25761010080835404028352916020019161331d565b820191906000526020600020905b81548152906001019060200180831161330057829003601f168201915b50505050600283015460038401546004850154600586015460069096015494956001600160a01b03909316949193509160ff169087565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461339c5760405162461bcd60e51b815260040161095c90614f51565b6103e88111156133e65760405162461bcd60e51b81526020600482015260156024820152744665652063616e6e6f74206578636565642031302560581b604482015260640161095c565b600380549082905560408051828152602081018490527fd347e206f25a89b917fc9482f1a2d294d749baa4dc9bde7fb495ee11fe491643910160405180910390a15050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146134735760405162461bcd60e51b815260040161095c90614f51565b61347b61456e565b4780156135435760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d80600081146134ef576040519150601f19603f3d011682016040523d82523d6000602084013e6134f4565b606091505b50509050806135415760405162461bcd60e51b815260206004820152601960248201527811551208199959481dda5d1a191c985dd85b0819985a5b1959603a1b604482015260640161095c565b505b60005b600654811015610f7d576000600682815481106135655761356561510d565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa1580156135b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135dc919061526b565b90508015613618576136186001600160a01b0383167f00000000000000000000000000000000000000000000000000000000000000008361462b565b5050808061362590615123565b915050613546565b60006136398383614598565b9050600060098260405161364d9190614f81565b908152604051908190036020019020805461366790614f9d565b9050116136865760405162461bcd60e51b815260040161095c9061513c565b6009816040516136969190614f81565b9081526040519081900360200190206005015460ff166136f05760405162461bcd60e51b8152602060048201526015602482015274436f6e74656e74206973206e6f742061637469766560581b604482015260640161095c565b600034116137105760405162461bcd60e51b815260040161095c9061516c565b60006009826040516137229190614f81565b9081526020016040518091039020905060006127106003543461374591906151df565b61374f91906151f6565b9050600061375d8234615218565b90508083600301600082825461377391906150fa565b909155505060048301805490600061378a83615123565b909155505060028301546001600160a01b03166000908152600b60209081526040808320838052909152812080548392906137c69084906150fa565b9091555050336000908152600c60209081526040808320838052909152812080543492906137f59084906150fa565b90915550506040805160e0810182523381526002808601546001600160a01b039081166020808501918252348587019081524260608701908152608087018e815260a088018e9052600060c0890181905287548152600d90945297909220865181549086166001600160a01b0319918216178255935160018201805491909616941693909317909355915192810192909255516003820155915190919060048201906138a19082615025565b5060a082015160058201906138b69082615025565b5060c09190910151600690910180546001600160a01b0319166001600160a01b03909216919091179055604051600e906138f1908690614f81565b908152604051602091819003820190206002805482546001810184556000938452938320909301929092558154919061392983615123565b91905055508560405161393c9190614f81565b60405190819003902060028085015490546001600160a01b039091169033907f50ba6b67d6b9170aeaf5a08d95fa515ceb93c565365f478c49a3a2df8a54a41c908990349061398d90600190615218565b4260006040516139a195949392919061522b565b60405180910390a4505050505050565b606060006139bf8484614598565b9050600e816040516139d19190614f81565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015613a2357602002820191906000526020600020905b815481526020019060010190808311613a0f575b505050505091505092915050565b6000613a3d8484614598565b90506000600982604051613a519190614f81565b9081526040519081900360200190208054613a6b90614f9d565b905011613a8a5760405162461bcd60e51b815260040161095c9061513c565b336001600160a01b0316600982604051613aa49190614f81565b908152604051908190036020019020600201546001600160a01b031614613add5760405162461bcd60e51b815260040161095c906152b4565b6001600160a01b038216613b335760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206e6577206f776e6572206164647265737300000000000000604482015260640161095c565b600981604051613b439190614f81565b908152604051908190036020019020600201546001600160a01b0390811690831603613b9e5760405162461bcd60e51b815260206004820152600a60248201526929b0b6b29037bbb732b960b11b604482015260640161095c565b6000600982604051613bb09190614f81565b908152604051908190036020018120600201546001600160a01b031691508390600990613bde908590614f81565b908152604080516020928190038301902060020180546001600160a01b0319166001600160a01b039485161790559183166000908152600a909152908120905b8154811015613cfd578380519060200120828281548110613c4157613c4161510d565b90600052602060002001604051613c5891906152e3565b604051809103902003613ceb5781548290613c7590600190615218565b81548110613c8557613c8561510d565b90600052602060002001828281548110613ca157613ca161510d565b906000526020600020019081613cb7919061536f565b5081805480613cc857613cc8615359565b600190038181906000526020600020016000613ce49190614839565b9055613cfd565b80613cf581615123565b915050613c1e565b506001600160a01b0384166000908152600a6020908152604082208054600181018255908352912001613d308482615025565b50505050505050565b6060806006805480602002602001604051908101604052809291908181526020018280548015613d9257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d74575b505060065493955050506001600160401b038211159050613db557613db5614884565b604051908082528060200260200182016040528015613de857816020015b6060815260200190600190039081613dd35790505b50905060005b600654811015613eec576005600060068381548110613e0f57613e0f61510d565b60009182526020808320909101546001600160a01b0316835282019290925260400190208054613e3e90614f9d565b80601f0160208091040260200160405190810160405280929190818152602001828054613e6a90614f9d565b8015613eb75780601f10613e8c57610100808354040283529160200191613eb7565b820191906000526020600020905b815481529060010190602001808311613e9a57829003601f168201915b5050505050828281518110613ece57613ece61510d565b60200260200101819052508080613ee490615123565b915050613dee565b509091565b600080613efe8484614598565b90506000600982604051613f129190614f81565b9081526040519081900360200190208054613f2c90614f9d565b90501191505092915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614613f805760405162461bcd60e51b815260040161095c90614f51565b600781604051613f909190614f81565b9081526040519081900360200190205460ff16613fbf5760405162461bcd60e51b815260040161095c90615284565b6000600782604051613fd19190614f81565b908152604051908190036020019020805491151560ff1990921691909117905560005b6008548110156140d7578180519060200120600882815481106140195761401961510d565b9060005260206000200160405161403091906152e3565b6040518091039020036140c5576008805461404d90600190615218565b8154811061405d5761405d61510d565b906000526020600020016008828154811061407a5761407a61510d565b906000526020600020019081614090919061536f565b5060088054806140a2576140a2615359565b6001900381819060005260206000200160006140be9190614839565b90556140d7565b806140cf81615123565b915050613ff4565b50806040516140e69190614f81565b604051908190038120907f8068470e605465e644f90970e74a28f3ab98c829a51dc495da2e35978a5cfe5090600090a250565b6008818154811061412957600080fd5b9060005260206000200160009150905080546115ff90614f9d565b60606008805480602002602001604051908101604052809291908181526020016000905b8282101561421457838290600052602060002001805461418790614f9d565b80601f01602080910402602001604051908101604052809291908181526020018280546141b390614f9d565b80156142005780601f106141d557610100808354040283529160200191614200565b820191906000526020600020905b8154815290600101906020018083116141e357829003601f168201915b505050505081526020019060010190614168565b50505050905090565b6000818152600d60209081526040808320815160e08101835281546001600160a01b039081168252600183015416938101939093526002810154918301919091526003810154606083810191909152600482018054859485948594938493869384939092909160808401919061429290614f9d565b80601f01602080910402602001604051908101604052809291908181526020018280546142be90614f9d565b801561430b5780601f106142e05761010080835404028352916020019161430b565b820191906000526020600020905b8154815290600101906020018083116142ee57829003601f168201915b5050505050815260200160058201805461432490614f9d565b80601f016020809104026020016040519081016040528092919081815260200182805461435090614f9d565b801561439d5780601f106143725761010080835404028352916020019161439d565b820191906000526020600020905b81548152906001019060200180831161438057829003601f168201915b5050509183525050600691909101546001600160a01b031660209182015281519082015160408301516060840151608085015160a086015160c090960151949f939e50919c509a509850919650945092505050565b600d60205260009081526040902080546001820154600283015460038401546004850180546001600160a01b039586169694909516949293919261443590614f9d565b80601f016020809104026020016040519081016040528092919081815260200182805461446190614f9d565b80156144ae5780601f10614483576101008083540402835291602001916144ae565b820191906000526020600020905b81548152906001019060200180831161449157829003601f168201915b5050505050908060050180546144c390614f9d565b80601f01602080910402602001604051908101604052809291908181526020018280546144ef90614f9d565b801561453c5780601f106145115761010080835404028352916020019161453c565b820191906000526020600020905b81548152906001019060200180831161451f57829003601f168201915b505050600690930154919250506001600160a01b031687565b600560205260009081526040902080546115ff90614f9d565b60026000540361459157604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b606082826040516020016145ad929190615449565b604051602081830303815290604052905092915050565b6040516001600160a01b03848116602483015283811660448301526064820183905261143a9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050614661565b6040516001600160a01b0383811660248301526044820183905261465c91859182169063a9059cbb906064016145f9565b505050565b60006146766001600160a01b038416836146c4565b9050805160001415801561469b5750808060200190518101906146999190615485565b155b1561465c57604051635274afe760e01b81526001600160a01b038416600482015260240161095c565b60606128dd8383600084600080856001600160a01b031684866040516146ea9190614f81565b60006040518083038185875af1925050503d8060008114614727576040519150601f19603f3d011682016040523d82523d6000602084013e61472c565b606091505b509150915061473c868383614746565b9695505050505050565b60608261475b57614756826147a2565b6128dd565b815115801561477257506001600160a01b0384163b155b1561479b57604051639996b31560e01b81526001600160a01b038516600482015260240161095c565b50806128dd565b8051156147b25780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b82805482825590600052602060002090810192821561480b5760005260206000209182015b8281111561480b5782548255916001019190600101906147f0565b5061481792915061486f565b5090565b50805460008255906000526020600020908101906115c4919061486f565b50805461484590614f9d565b6000825580601f10614855575050565b601f0160209004906000526020600020908101906115c491905b5b808211156148175760008155600101614870565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126148ab57600080fd5b81356001600160401b03808211156148c5576148c5614884565b604051601f8301601f19908116603f011681019082821181831017156148ed576148ed614884565b8160405283815286602085880101111561490657600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561493857600080fd5b81356001600160401b0381111561494e57600080fd5b61495a8482850161489a565b949350505050565b80356001600160a01b038116811461497957600080fd5b919050565b60006020828403121561499057600080fd5b6128dd82614962565b600081518084526020808501945080840160005b838110156149d25781516001600160a01b0316875295820195908201906001016149ad565b509495945050505050565b600081518084526020808501945080840160005b838110156149d2578151875295820195908201906001016149f1565b60005b83811015614a28578181015183820152602001614a10565b50506000910152565b60008151808452614a49816020860160208601614a0d565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015614aa857601f19868403018952614a96838351614a31565b98840198925090830190600101614a7a565b5090979650505050505050565b606081526000614ac86060830186614999565b8281036020840152614ada81866149dd565b9050828103604084015261473c8185614a5d565b60008060408385031215614b0157600080fd5b82356001600160401b03811115614b1757600080fd5b614b238582860161489a565b95602094909401359450505050565b600060208284031215614b4457600080fd5b5035919050565b60008060008060808587031215614b6157600080fd5b84356001600160401b0380821115614b7857600080fd5b614b848883890161489a565b95506020870135915080821115614b9a57600080fd5b50614ba78782880161489a565b935050614bb660408601614962565b9396929550929360600135925050565b60008060408385031215614bd957600080fd5b614be283614962565b946020939093013593505050565b6020815260006128dd6020830184614a31565b6020815260006128dd6020830184614a5d565b60008060408385031215614c2957600080fd5b82356001600160401b0380821115614c4057600080fd5b614c4c8683870161489a565b93506020850135915080821115614c6257600080fd5b50614c6f8582860161489a565b9150509250929050565b60e081526000614c8c60e083018a614a31565b8281036020840152614c9e818a614a31565b6001600160a01b03989098166040840152505060608101949094526080840192909252151560a083015260c09091015292915050565b600080600060608486031215614ce957600080fd5b83356001600160401b0380821115614d0057600080fd5b614d0c8783880161489a565b94506020860135915080821115614d2257600080fd5b614d2e8783880161489a565b93506040860135915080821115614d4457600080fd5b50614d518682870161489a565b9150509250925092565b600080600060608486031215614d7057600080fd5b83356001600160401b0380821115614d8757600080fd5b614d938783880161489a565b94506020860135915080821115614da957600080fd5b50614db68682870161489a565b925050604084013590509250925092565b6020815260006128dd60208301846149dd565b60008060408385031215614ded57600080fd5b614df683614962565b915060208301356001600160401b03811115614e1157600080fd5b614c6f8582860161489a565b60008060408385031215614e3057600080fd5b614e3983614962565b9150614e4760208401614962565b90509250929050565b600080600060608486031215614e6557600080fd5b83356001600160401b0380821115614e7c57600080fd5b614e888783880161489a565b94506020860135915080821115614e9e57600080fd5b50614eab8682870161489a565b925050614eba60408501614962565b90509250925092565b604081526000614ed66040830185614999565b8281036020840152614ee88185614a5d565b95945050505050565b600060018060a01b03808a168352808916602084015287604084015286606084015260e06080840152614f2760e0840187614a31565b83810360a0850152614f398187614a31565b92505080841660c08401525098975050505050505050565b6020808252601690820152752737ba103a34329031b7b73a3930b1ba1037bbb732b960511b604082015260600190565b60008251614f93818460208701614a0d565b9190910192915050565b600181811c90821680614fb157607f821691505b602082108103614fd157634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561465c57600081815260208120601f850160051c81016020861015614ffe5750805b601f850160051c820191505b8181101561501d5782815560010161500a565b505050505050565b81516001600160401b0381111561503e5761503e614884565b6150528161504c8454614f9d565b84614fd7565b602080601f831160018114615087576000841561506f5750858301515b600019600386901b1c1916600185901b17855561501d565b600085815260208120601f198616915b828110156150b657888601518255948401946001909101908401615097565b50858210156150d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b808201808211156131ea576131ea6150e4565b634e487b7160e01b600052603260045260246000fd5b600060018201615135576151356150e4565b5060010190565b60208082526016908201527510dbdb9d195b9d08191bd95cc81b9bdd08195e1a5cdd60521b604082015260600190565b60208082526026908201527f446f6e6174696f6e20616d6f756e74206d75737420626520677265617465722060408201526507468616e20360d41b606082015260800190565b602080825260139082015272151bdad95b881b9bdd081cdd5c1c1bdc9d1959606a1b604082015260600190565b80820281158282048414176131ea576131ea6150e4565b60008261521357634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156131ea576131ea6150e4565b60a08152600061523e60a0830188614a31565b602083019690965250604081019390935260608301919091526001600160a01b0316608090910152919050565b60006020828403121561527d57600080fd5b5051919050565b602080825260169082015275141b185d199bdc9b481b9bdd081cdd5c1c1bdc9d195960521b604082015260600190565b6020808252601590820152742737ba103a34329031b7b73a32b73a1037bbb732b960591b604082015260600190565b60008083546152f181614f9d565b60018281168015615309576001811461531e5761534d565b60ff198416875282151583028701945061534d565b8760005260208060002060005b858110156153445781548a82015290840190820161532b565b50505082870194505b50929695505050505050565b634e487b7160e01b600052603160045260246000fd5b81810361537a575050565b6153848254614f9d565b6001600160401b0381111561539b5761539b614884565b6153a98161504c8454614f9d565b6000601f8211600181146153dd57600083156153c55750848201545b600019600385901b1c1916600184901b178455615442565b600085815260209020601f19841690600086815260209020845b8381101561541757828601548255600195860195909101906020016153f7565b50858310156154355781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b6000835161545b818460208801614a0d565b600160fe1b9083019081528351615479816001840160208801614a0d565b01600101949350505050565b60006020828403121561549757600080fd5b815180151581146128dd57600080fdfe565848cdb1369b8f0e5b0f6eb298a192163a96cf9f692903ec5f14cd2c0b7b65a2646970667358221220c33e0dac180597cd72f2b1fdab8d95e3c408ae563018b5fdc17bbb6765f47abd64736f6c63430008140033",
    "devdoc": {
      "author": "Pisang Biru ",
      "errors": {
        "AddressEmptyCode(address)": [
          {
            "details": "There's no code at `target` (it is not a contract)."
          }
        ],
        "AddressInsufficientBalance(address)": [
          {
            "details": "The ETH balance of the account is not enough to perform the operation."
          }
        ],
        "FailedInnerCall()": [
          {
            "details": "A call to an address target failed. The target may have reverted."
          }
        ],
        "ReentrancyGuardReentrantCall()": [
          {
            "details": "Unauthorized reentrant call."
          }
        ],
        "SafeERC20FailedOperation(address)": [
          {
            "details": "An operation with an ERC20 token failed."
          }
        ]
      },
      "kind": "dev",
      "methods": {
        "addSupportedPlatform(string)": {
          "params": {
            "_platform": "The platform name to add"
          }
        },
        "addSupportedToken(address,string)": {
          "params": {
            "_symbol": "The token symbol for display purposes",
            "_token": "The token address to add"
          }
        },
        "changeUsername(string,string,string)": {
          "params": {
            "_newUsername": "The new username",
            "_oldUsername": "The current username",
            "_platform": "The platform of the content"
          }
        },
        "contentExistsCheck(string,string)": {
          "params": {
            "_platform": "The platform to check",
            "_username": "The username to check"
          },
          "returns": {
            "_0": "bool True if content exists, false otherwise"
          }
        },
        "deactivateContent(string,string)": {
          "params": {
            "_platform": "The platform of the content",
            "_username": "The username to deactivate"
          }
        },
        "donateToContent(string,string)": {
          "params": {
            "_platform": "The platform of the content",
            "_username": "The username to donate to"
          }
        },
        "donateTokenToContent(string,string,address,uint256)": {
          "params": {
            "_amount": "The amount of tokens to donate",
            "_platform": "The platform of the content",
            "_token": "The token address to donate",
            "_username": "The username to donate to"
          }
        },
        "getContent(string,string)": {
          "params": {
            "_platform": "The platform",
            "_username": "The username"
          }
        },
        "getContentDonations(string,string)": {
          "params": {
            "_platform": "The platform",
            "_username": "The username"
          }
        },
        "getCreatorAllEarnings(address)": {
          "params": {
            "_creator": "The creator's address"
          }
        },
        "getCreatorContents(address)": {
          "params": {
            "_creator": "The creator's address"
          }
        },
        "getCreatorEarnings(address,address)": {
          "params": {
            "_creator": "The creator's address",
            "_token": "The token address (address(0) for ETH)"
          }
        },
        "getDonation(uint256)": {
          "params": {
            "_donationId": "The donation ID"
          }
        },
        "getDonorAllDonations(address)": {
          "params": {
            "_donor": "The donor's address"
          }
        },
        "getDonorTotalDonations(address,address)": {
          "params": {
            "_donor": "The donor's address",
            "_token": "The token address (address(0) for ETH)"
          }
        },
        "getRecentDonations(string,string,uint256)": {
          "params": {
            "_limit": "The number of recent donations to return",
            "_platform": "The platform",
            "_username": "The username"
          }
        },
        "reactivateContent(string,string)": {
          "params": {
            "_platform": "The platform of the content",
            "_username": "The username to reactivate"
          }
        },
        "registerContent(string,string)": {
          "params": {
            "_platform": "The platform (twitch, youtube, facebook, tiktok, etc.)",
            "_username": "The username on the platform"
          }
        },
        "removeSupportedPlatform(string)": {
          "params": {
            "_platform": "The platform name to remove"
          }
        },
        "removeSupportedToken(address)": {
          "params": {
            "_token": "The token address to remove"
          }
        },
        "transferContentOwnership(string,string,address)": {
          "params": {
            "_newOwner": "The new owner address",
            "_platform": "The platform",
            "_username": "The username"
          }
        },
        "updatePlatformFee(uint256)": {
          "params": {
            "_newFee": "New fee in basis points (e.g., 250 = 2.5%)"
          }
        },
        "withdrawPlatformFeesToken(address)": {
          "params": {
            "_token": "The token address to withdraw fees for"
          }
        },
        "withdrawTokenEarnings(address)": {
          "params": {
            "_token": "The token address to withdraw"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addSupportedPlatform(string)": {
          "notice": "Add a supported platform (only contract owner)"
        },
        "addSupportedToken(address,string)": {
          "notice": "Add a supported token (only contract owner)"
        },
        "changeUsername(string,string,string)": {
          "notice": "Change username for an existing content account"
        },
        "contentExistsCheck(string,string)": {
          "notice": "Check if content exists"
        },
        "deactivateContent(string,string)": {
          "notice": "Deactivate content (only by content owner)"
        },
        "donateToContent(string,string)": {
          "notice": "Donate to a specific content"
        },
        "donateTokenToContent(string,string,address,uint256)": {
          "notice": "Donate tokens to a specific content"
        },
        "getContent(string,string)": {
          "notice": "Get content information"
        },
        "getContentDonations(string,string)": {
          "notice": "Get donation IDs for a specific content"
        },
        "getCreatorAllEarnings(address)": {
          "notice": "Get creator earnings for all tokens"
        },
        "getCreatorContents(address)": {
          "notice": "Get all content keys (username-at-platform) by a creator"
        },
        "getCreatorEarnings(address,address)": {
          "notice": "Get creator earnings for a specific token"
        },
        "getDonation(uint256)": {
          "notice": "Get donation details by ID"
        },
        "getDonorAllDonations(address)": {
          "notice": "Get donor total donations for all tokens"
        },
        "getDonorTotalDonations(address,address)": {
          "notice": "Get donor total donations for a specific token"
        },
        "getPlatformStats()": {
          "notice": "Get platform statistics"
        },
        "getRecentDonations(string,string,uint256)": {
          "notice": "Get recent donations for a specific content"
        },
        "getSupportedPlatforms()": {
          "notice": "Get all supported platforms"
        },
        "getSupportedTokens()": {
          "notice": "Get all supported tokens"
        },
        "reactivateContent(string,string)": {
          "notice": "Reactivate content (only by content owner)"
        },
        "registerContent(string,string)": {
          "notice": "Register a new streaming content with username and platform"
        },
        "removeSupportedPlatform(string)": {
          "notice": "Remove a supported platform (only contract owner)"
        },
        "removeSupportedToken(address)": {
          "notice": "Remove a supported token (only contract owner)"
        },
        "transferContentOwnership(string,string,address)": {
          "notice": "Emergency function to transfer content ownership"
        },
        "updatePlatformFee(uint256)": {
          "notice": "Update platform fee (only contract owner)"
        },
        "withdrawAllEarnings()": {
          "notice": "Withdraw all earnings for a creator (ETH + all supported tokens)"
        },
        "withdrawAllPlatformFees()": {
          "notice": "Withdraw all platform fees (ETH + all tokens) (only contract owner)"
        },
        "withdrawEthEarnings()": {
          "notice": "Allow creators to withdraw their ETH earnings"
        },
        "withdrawPlatformFeesEth()": {
          "notice": "Withdraw platform fees in ETH (only contract owner)"
        },
        "withdrawPlatformFeesToken(address)": {
          "notice": "Withdraw platform fees in tokens (only contract owner)"
        },
        "withdrawTokenEarnings(address)": {
          "notice": "Allow creators to withdraw their token earnings"
        }
      },
      "notice": "A smart contract for streaming content donations Allows content creators to register their streaming URLs and receive donations",
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 667,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "_status",
          "offset": 0,
          "slot": "0",
          "type": "t_uint256"
        },
        {
          "astId": 743,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "totalContents",
          "offset": 0,
          "slot": "1",
          "type": "t_uint256"
        },
        {
          "astId": 746,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "totalDonations",
          "offset": 0,
          "slot": "2",
          "type": "t_uint256"
        },
        {
          "astId": 749,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "platformFee",
          "offset": 0,
          "slot": "3",
          "type": "t_uint256"
        },
        {
          "astId": 753,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "supportedTokens",
          "offset": 0,
          "slot": "4",
          "type": "t_mapping(t_address,t_bool)"
        },
        {
          "astId": 757,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "tokenSymbols",
          "offset": 0,
          "slot": "5",
          "type": "t_mapping(t_address,t_string_storage)"
        },
        {
          "astId": 760,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "supportedTokenList",
          "offset": 0,
          "slot": "6",
          "type": "t_array(t_address)dyn_storage"
        },
        {
          "astId": 764,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "supportedPlatforms",
          "offset": 0,
          "slot": "7",
          "type": "t_mapping(t_string_memory_ptr,t_bool)"
        },
        {
          "astId": 767,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "supportedPlatformList",
          "offset": 0,
          "slot": "8",
          "type": "t_array(t_string_storage)dyn_storage"
        },
        {
          "astId": 802,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "contents",
          "offset": 0,
          "slot": "9",
          "type": "t_mapping(t_string_memory_ptr,t_struct(Content)782_storage)"
        },
        {
          "astId": 807,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "creatorContents",
          "offset": 0,
          "slot": "10",
          "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
        },
        {
          "astId": 813,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "creatorEarnings",
          "offset": 0,
          "slot": "11",
          "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
        },
        {
          "astId": 819,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "donorTotalDonations",
          "offset": 0,
          "slot": "12",
          "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
        },
        {
          "astId": 824,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "donations",
          "offset": 0,
          "slot": "13",
          "type": "t_mapping(t_uint256,t_struct(Donation)797_storage)"
        },
        {
          "astId": 829,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "contentDonations",
          "offset": 0,
          "slot": "14",
          "type": "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_array(t_address)dyn_storage": {
          "base": "t_address",
          "encoding": "dynamic_array",
          "label": "address[]",
          "numberOfBytes": "32"
        },
        "t_array(t_string_storage)dyn_storage": {
          "base": "t_string_storage",
          "encoding": "dynamic_array",
          "label": "string[]",
          "numberOfBytes": "32"
        },
        "t_array(t_uint256)dyn_storage": {
          "base": "t_uint256",
          "encoding": "dynamic_array",
          "label": "uint256[]",
          "numberOfBytes": "32"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => string[])",
          "numberOfBytes": "32",
          "value": "t_array(t_string_storage)dyn_storage"
        },
        "t_mapping(t_address,t_bool)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => mapping(address => uint256))",
          "numberOfBytes": "32",
          "value": "t_mapping(t_address,t_uint256)"
        },
        "t_mapping(t_address,t_string_storage)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => string)",
          "numberOfBytes": "32",
          "value": "t_string_storage"
        },
        "t_mapping(t_address,t_uint256)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => uint256)",
          "numberOfBytes": "32",
          "value": "t_uint256"
        },
        "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)": {
          "encoding": "mapping",
          "key": "t_string_memory_ptr",
          "label": "mapping(string => uint256[])",
          "numberOfBytes": "32",
          "value": "t_array(t_uint256)dyn_storage"
        },
        "t_mapping(t_string_memory_ptr,t_bool)": {
          "encoding": "mapping",
          "key": "t_string_memory_ptr",
          "label": "mapping(string => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_string_memory_ptr,t_struct(Content)782_storage)": {
          "encoding": "mapping",
          "key": "t_string_memory_ptr",
          "label": "mapping(string => struct PisangContract.Content)",
          "numberOfBytes": "32",
          "value": "t_struct(Content)782_storage"
        },
        "t_mapping(t_uint256,t_struct(Donation)797_storage)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => struct PisangContract.Donation)",
          "numberOfBytes": "32",
          "value": "t_struct(Donation)797_storage"
        },
        "t_string_memory_ptr": {
          "encoding": "bytes",
          "label": "string",
          "numberOfBytes": "32"
        },
        "t_string_storage": {
          "encoding": "bytes",
          "label": "string",
          "numberOfBytes": "32"
        },
        "t_struct(Content)782_storage": {
          "encoding": "inplace",
          "label": "struct PisangContract.Content",
          "members": [
            {
              "astId": 769,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "username",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage"
            },
            {
              "astId": 771,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "platform",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage"
            },
            {
              "astId": 773,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address"
            },
            {
              "astId": 775,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "totalDonationsReceived",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256"
            },
            {
              "astId": 777,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "donationCount",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256"
            },
            {
              "astId": 779,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "isActive",
              "offset": 0,
              "slot": "5",
              "type": "t_bool"
            },
            {
              "astId": 781,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "createdAt",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256"
            }
          ],
          "numberOfBytes": "224"
        },
        "t_struct(Donation)797_storage": {
          "encoding": "inplace",
          "label": "struct PisangContract.Donation",
          "members": [
            {
              "astId": 784,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "donor",
              "offset": 0,
              "slot": "0",
              "type": "t_address"
            },
            {
              "astId": 786,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "contentOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address"
            },
            {
              "astId": 788,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "amount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256"
            },
            {
              "astId": 790,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "timestamp",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256"
            },
            {
              "astId": 792,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "contentUsername",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage"
            },
            {
              "astId": 794,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "contentPlatform",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage"
            },
            {
              "astId": 796,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "token",
              "offset": 0,
              "slot": "6",
              "type": "t_address"
            }
          ],
          "numberOfBytes": "224"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  }